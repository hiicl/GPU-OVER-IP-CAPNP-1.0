// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: hook-launcher.capnp

#include "hook-launcher.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<50> b_9a6ef642818fc4ee = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    238, 196, 143, 129,  66, 246, 110, 154,
     20,   0,   0,   0,   1,   0,   2,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,   0,   0,   0, 192,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  65, 108, 108, 111,
     99,  97, 116, 105, 111, 110,  82, 101,
    115, 117, 108, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    102,  97, 107, 101,  80, 116, 114,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    125,   7, 179, 164, 122,  15,  56, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9a6ef642818fc4ee = b_9a6ef642818fc4ee.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9a6ef642818fc4ee[] = {
  &s_fd380f7aa4b3077d,
};
static const uint16_t m_9a6ef642818fc4ee[] = {1, 0};
static const uint16_t i_9a6ef642818fc4ee[] = {0, 1};
const ::capnp::_::RawSchema s_9a6ef642818fc4ee = {
  0x9a6ef642818fc4ee, b_9a6ef642818fc4ee.words, 50, d_9a6ef642818fc4ee, m_9a6ef642818fc4ee,
  1, 2, i_9a6ef642818fc4ee, nullptr, nullptr, { &s_9a6ef642818fc4ee, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<83> b_ddb256ee5b6b53b3 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    179,  83, 107,  91, 238,  86, 178, 221,
     20,   0,   0,   0,   1,   0,   2,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   0,   0,   0,  82,   1,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  77, 101, 109,  99,
    112, 121,  80, 108,  97, 110,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
    116,  97, 114, 103, 101, 116,  83, 101,
    114, 118, 101, 114,  73, 112,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,  97, 114, 103, 101, 116,  83, 101,
    114, 118, 101, 114,  82, 100, 109,  97,
     80, 111, 114, 116,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 109, 111, 116, 101,  80, 116,
    114,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    125,   7, 179, 164, 122,  15,  56, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ddb256ee5b6b53b3 = b_ddb256ee5b6b53b3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ddb256ee5b6b53b3[] = {
  &s_fd380f7aa4b3077d,
};
static const uint16_t m_ddb256ee5b6b53b3[] = {3, 2, 0, 1};
static const uint16_t i_ddb256ee5b6b53b3[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_ddb256ee5b6b53b3 = {
  0xddb256ee5b6b53b3, b_ddb256ee5b6b53b3.words, 83, d_ddb256ee5b6b53b3, m_ddb256ee5b6b53b3,
  1, 4, i_ddb256ee5b6b53b3, nullptr, nullptr, { &s_ddb256ee5b6b53b3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<82> b_eb7186a22c3fa0de = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    222, 160,  63,  44, 162, 134, 113, 235,
     20,   0,   0,   0,   1,   0,   2,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     86,   1,   0,   0, 217,   1,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  78, 111, 100, 101,
     83, 116,  97, 116, 117, 115,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 118,  97, 105, 108,  97,  98, 108,
    101,  77, 101, 109, 111, 114, 121,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  85, 116, 105, 108, 105,
    122,  97, 116, 105, 111, 110,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 119, 111, 114, 107,  76,
     97, 116, 101, 110,  99, 121,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eb7186a22c3fa0de = b_eb7186a22c3fa0de.words;
#if !CAPNP_LITE
static const uint16_t m_eb7186a22c3fa0de[] = {1, 2, 0, 3};
static const uint16_t i_eb7186a22c3fa0de[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_eb7186a22c3fa0de = {
  0xeb7186a22c3fa0de, b_eb7186a22c3fa0de.words, 82, nullptr, m_eb7186a22c3fa0de,
  0, 4, i_eb7186a22c3fa0de, nullptr, nullptr, { &s_eb7186a22c3fa0de, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<88> b_b5d15336d30e0dd1 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    209,  13,  14, 211,  54,  83, 209, 181,
     20,   0,   0,   0,   3,   0,   0,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   1,   0,   0, 249,   3,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 135,   1,   0,   0,
     45,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148, 109, 138, 178,  81, 208,   0, 160,
     64, 169, 115,  90,  30, 219, 204, 217,
    177,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     79, 128, 138, 233, 203,  35,  53, 235,
     57, 143, 233,  65, 190, 158,  56, 250,
    161,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    133, 157, 208, 110, 172, 187, 182, 128,
     32,  11, 244, 162, 201,  34, 101, 231,
    141,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    244,   8, 218, 103, 137, 115, 252, 190,
     32,  47, 172,  30, 131,  42, 189, 203,
    121,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    183,  92, 145, 168, 159,  81, 171, 164,
    176, 231, 149, 175, 239, 141, 173, 140,
    101,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    223, 230,   2, 188, 231, 234,  71, 187,
     87,   3, 100, 241,  85, 161, 100, 129,
     81,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 113, 117, 101, 115, 116,  65,
    108, 108, 111,  99,  97, 116, 105, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,  70,
    114, 101, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112, 108,  97, 110,  77, 101, 109,  99,
    112, 121,  72, 116, 111,  68,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112, 108,  97, 110,  77, 101, 109,  99,
    112, 121,  68, 116, 111,  72,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108,  97, 117, 110,  99, 104,  75, 101,
    114, 110, 101, 108,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  78, 111, 100, 101,  83,
    116,  97, 116, 117, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b5d15336d30e0dd1 = b_b5d15336d30e0dd1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b5d15336d30e0dd1[] = {
  &s_80b6bbac6ed09d85,
  &s_8164a155f1640357,
  &s_8cad8defaf95e7b0,
  &s_a000d051b28a6d94,
  &s_a4ab519fa8915cb7,
  &s_bb47eae7bc02e6df,
  &s_befc738967da08f4,
  &s_cbbd2a831eac2f20,
  &s_d9ccdb1e5a73a940,
  &s_e76522c9a2f40b20,
  &s_eb3523cbe98a804f,
  &s_fa389ebe41e98f39,
};
static const uint16_t m_b5d15336d30e0dd1[] = {5, 4, 3, 2, 0, 1};
const ::capnp::_::RawSchema s_b5d15336d30e0dd1 = {
  0xb5d15336d30e0dd1, b_b5d15336d30e0dd1.words, 88, d_b5d15336d30e0dd1, m_b5d15336d30e0dd1,
  12, 6, nullptr, nullptr, nullptr, { &s_b5d15336d30e0dd1, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_a000d051b28a6d94 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    148, 109, 138, 178,  81, 208,   0, 160,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 114, 101, 113, 117, 101, 115, 116,
     65, 108, 108, 111,  99,  97, 116, 105,
    111, 110,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a000d051b28a6d94 = b_a000d051b28a6d94.words;
#if !CAPNP_LITE
static const uint16_t m_a000d051b28a6d94[] = {0};
static const uint16_t i_a000d051b28a6d94[] = {0};
const ::capnp::_::RawSchema s_a000d051b28a6d94 = {
  0xa000d051b28a6d94, b_a000d051b28a6d94.words, 37, nullptr, m_a000d051b28a6d94,
  0, 1, i_a000d051b28a6d94, nullptr, nullptr, { &s_a000d051b28a6d94, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_d9ccdb1e5a73a940 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     64, 169, 115,  90,  30, 219, 204, 217,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 114, 101, 113, 117, 101, 115, 116,
     65, 108, 108, 111,  99,  97, 116, 105,
    111, 110,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    238, 196, 143, 129,  66, 246, 110, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d9ccdb1e5a73a940 = b_d9ccdb1e5a73a940.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d9ccdb1e5a73a940[] = {
  &s_9a6ef642818fc4ee,
};
static const uint16_t m_d9ccdb1e5a73a940[] = {0};
static const uint16_t i_d9ccdb1e5a73a940[] = {0};
const ::capnp::_::RawSchema s_d9ccdb1e5a73a940 = {
  0xd9ccdb1e5a73a940, b_d9ccdb1e5a73a940.words, 37, d_d9ccdb1e5a73a940, m_d9ccdb1e5a73a940,
  1, 1, i_d9ccdb1e5a73a940, nullptr, nullptr, { &s_d9ccdb1e5a73a940, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_eb3523cbe98a804f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     79, 128, 138, 233, 203,  35,  53, 235,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 114, 101, 113, 117, 101, 115, 116,
     70, 114, 101, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102,  97, 107, 101,  80, 116, 114,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eb3523cbe98a804f = b_eb3523cbe98a804f.words;
#if !CAPNP_LITE
static const uint16_t m_eb3523cbe98a804f[] = {0};
static const uint16_t i_eb3523cbe98a804f[] = {0};
const ::capnp::_::RawSchema s_eb3523cbe98a804f = {
  0xeb3523cbe98a804f, b_eb3523cbe98a804f.words, 36, nullptr, m_eb3523cbe98a804f,
  0, 1, i_eb3523cbe98a804f, nullptr, nullptr, { &s_eb3523cbe98a804f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_fa389ebe41e98f39 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     57, 143, 233,  65, 190, 158,  56, 250,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 114, 101, 113, 117, 101, 115, 116,
     70, 114, 101, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    125,   7, 179, 164, 122,  15,  56, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fa389ebe41e98f39 = b_fa389ebe41e98f39.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fa389ebe41e98f39[] = {
  &s_fd380f7aa4b3077d,
};
static const uint16_t m_fa389ebe41e98f39[] = {0};
static const uint16_t i_fa389ebe41e98f39[] = {0};
const ::capnp::_::RawSchema s_fa389ebe41e98f39 = {
  0xfa389ebe41e98f39, b_fa389ebe41e98f39.words, 36, d_fa389ebe41e98f39, m_fa389ebe41e98f39,
  1, 1, i_fa389ebe41e98f39, nullptr, nullptr, { &s_fa389ebe41e98f39, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_80b6bbac6ed09d85 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    133, 157, 208, 110, 172, 187, 182, 128,
     33,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 112, 108,  97, 110,  77, 101, 109,
     99, 112, 121,  72, 116, 111,  68,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    100, 115, 116,  70,  97, 107, 101,  80,
    116, 114,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_80b6bbac6ed09d85 = b_80b6bbac6ed09d85.words;
#if !CAPNP_LITE
static const uint16_t m_80b6bbac6ed09d85[] = {0, 1};
static const uint16_t i_80b6bbac6ed09d85[] = {0, 1};
const ::capnp::_::RawSchema s_80b6bbac6ed09d85 = {
  0x80b6bbac6ed09d85, b_80b6bbac6ed09d85.words, 52, nullptr, m_80b6bbac6ed09d85,
  0, 2, i_80b6bbac6ed09d85, nullptr, nullptr, { &s_80b6bbac6ed09d85, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_e76522c9a2f40b20 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     32,  11, 244, 162, 201,  34, 101, 231,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 112, 108,  97, 110,  77, 101, 109,
     99, 112, 121,  72, 116, 111,  68,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 108,  97, 110,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    179,  83, 107,  91, 238,  86, 178, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e76522c9a2f40b20 = b_e76522c9a2f40b20.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e76522c9a2f40b20[] = {
  &s_ddb256ee5b6b53b3,
};
static const uint16_t m_e76522c9a2f40b20[] = {0};
static const uint16_t i_e76522c9a2f40b20[] = {0};
const ::capnp::_::RawSchema s_e76522c9a2f40b20 = {
  0xe76522c9a2f40b20, b_e76522c9a2f40b20.words, 36, d_e76522c9a2f40b20, m_e76522c9a2f40b20,
  1, 1, i_e76522c9a2f40b20, nullptr, nullptr, { &s_e76522c9a2f40b20, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_befc738967da08f4 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    244,   8, 218, 103, 137, 115, 252, 190,
     33,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 112, 108,  97, 110,  77, 101, 109,
     99, 112, 121,  68, 116, 111,  72,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    115, 114,  99,  70,  97, 107, 101,  80,
    116, 114,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_befc738967da08f4 = b_befc738967da08f4.words;
#if !CAPNP_LITE
static const uint16_t m_befc738967da08f4[] = {1, 0};
static const uint16_t i_befc738967da08f4[] = {0, 1};
const ::capnp::_::RawSchema s_befc738967da08f4 = {
  0xbefc738967da08f4, b_befc738967da08f4.words, 52, nullptr, m_befc738967da08f4,
  0, 2, i_befc738967da08f4, nullptr, nullptr, { &s_befc738967da08f4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_cbbd2a831eac2f20 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     32,  47, 172,  30, 131,  42, 189, 203,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 112, 108,  97, 110,  77, 101, 109,
     99, 112, 121,  68, 116, 111,  72,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 108,  97, 110,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    179,  83, 107,  91, 238,  86, 178, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cbbd2a831eac2f20 = b_cbbd2a831eac2f20.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cbbd2a831eac2f20[] = {
  &s_ddb256ee5b6b53b3,
};
static const uint16_t m_cbbd2a831eac2f20[] = {0};
static const uint16_t i_cbbd2a831eac2f20[] = {0};
const ::capnp::_::RawSchema s_cbbd2a831eac2f20 = {
  0xcbbd2a831eac2f20, b_cbbd2a831eac2f20.words, 36, d_cbbd2a831eac2f20, m_cbbd2a831eac2f20,
  1, 1, i_cbbd2a831eac2f20, nullptr, nullptr, { &s_cbbd2a831eac2f20, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<98> b_a4ab519fa8915cb7 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    183,  92, 145, 168, 159,  81, 171, 164,
     33,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 108,  97, 117, 110,  99, 104,  75,
    101, 114, 110, 101, 108,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
    102, 117, 110,  99,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  68, 105, 109,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  68, 105, 109,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 104,  97, 114, 101, 100,  77, 101,
    109,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a4ab519fa8915cb7 = b_a4ab519fa8915cb7.words;
#if !CAPNP_LITE
static const uint16_t m_a4ab519fa8915cb7[] = {2, 0, 1, 4, 3};
static const uint16_t i_a4ab519fa8915cb7[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_a4ab519fa8915cb7 = {
  0xa4ab519fa8915cb7, b_a4ab519fa8915cb7.words, 98, nullptr, m_a4ab519fa8915cb7,
  0, 5, i_a4ab519fa8915cb7, nullptr, nullptr, { &s_a4ab519fa8915cb7, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_8cad8defaf95e7b0 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    176, 231, 149, 175, 239, 141, 173, 140,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 108,  97, 117, 110,  99, 104,  75,
    101, 114, 110, 101, 108,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    125,   7, 179, 164, 122,  15,  56, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8cad8defaf95e7b0 = b_8cad8defaf95e7b0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8cad8defaf95e7b0[] = {
  &s_fd380f7aa4b3077d,
};
static const uint16_t m_8cad8defaf95e7b0[] = {0};
static const uint16_t i_8cad8defaf95e7b0[] = {0};
const ::capnp::_::RawSchema s_8cad8defaf95e7b0 = {
  0x8cad8defaf95e7b0, b_8cad8defaf95e7b0.words, 36, d_8cad8defaf95e7b0, m_8cad8defaf95e7b0,
  1, 1, i_8cad8defaf95e7b0, nullptr, nullptr, { &s_8cad8defaf95e7b0, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_bb47eae7bc02e6df = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    223, 230,   2, 188, 231, 234,  71, 187,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 103, 101, 116,  78, 111, 100, 101,
     83, 116,  97, 116, 117, 115,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_bb47eae7bc02e6df = b_bb47eae7bc02e6df.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bb47eae7bc02e6df = {
  0xbb47eae7bc02e6df, b_bb47eae7bc02e6df.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bb47eae7bc02e6df, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_8164a155f1640357 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     87,   3, 100, 241,  85, 161, 100, 129,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 103, 101, 116,  78, 111, 100, 101,
     83, 116,  97, 116, 117, 115,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 100, 101, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    222, 160,  63,  44, 162, 134, 113, 235,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8164a155f1640357 = b_8164a155f1640357.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8164a155f1640357[] = {
  &s_eb7186a22c3fa0de,
};
static const uint16_t m_8164a155f1640357[] = {0};
static const uint16_t i_8164a155f1640357[] = {0};
const ::capnp::_::RawSchema s_8164a155f1640357 = {
  0x8164a155f1640357, b_8164a155f1640357.words, 40, d_8164a155f1640357, m_8164a155f1640357,
  1, 1, i_8164a155f1640357, nullptr, nullptr, { &s_8164a155f1640357, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// AllocationResult
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t AllocationResult::_capnpPrivate::dataWordSize;
constexpr uint16_t AllocationResult::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind AllocationResult::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AllocationResult::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MemcpyPlan
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MemcpyPlan::_capnpPrivate::dataWordSize;
constexpr uint16_t MemcpyPlan::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MemcpyPlan::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MemcpyPlan::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// NodeStatus
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t NodeStatus::_capnpPrivate::dataWordSize;
constexpr uint16_t NodeStatus::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind NodeStatus::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* NodeStatus::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::HookLauncher::RequestAllocationParams,  ::HookLauncher::RequestAllocationResults>
HookLauncher::Client::requestAllocationRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::RequestAllocationParams,  ::HookLauncher::RequestAllocationResults>(
      0xb5d15336d30e0dd1ull, 0, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::requestAllocation(RequestAllocationContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "requestAllocation",
      0xb5d15336d30e0dd1ull, 0);
}
::capnp::Request< ::HookLauncher::RequestFreeParams,  ::HookLauncher::RequestFreeResults>
HookLauncher::Client::requestFreeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::RequestFreeParams,  ::HookLauncher::RequestFreeResults>(
      0xb5d15336d30e0dd1ull, 1, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::requestFree(RequestFreeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "requestFree",
      0xb5d15336d30e0dd1ull, 1);
}
::capnp::Request< ::HookLauncher::PlanMemcpyHtoDParams,  ::HookLauncher::PlanMemcpyHtoDResults>
HookLauncher::Client::planMemcpyHtoDRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::PlanMemcpyHtoDParams,  ::HookLauncher::PlanMemcpyHtoDResults>(
      0xb5d15336d30e0dd1ull, 2, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::planMemcpyHtoD(PlanMemcpyHtoDContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "planMemcpyHtoD",
      0xb5d15336d30e0dd1ull, 2);
}
::capnp::Request< ::HookLauncher::PlanMemcpyDtoHParams,  ::HookLauncher::PlanMemcpyDtoHResults>
HookLauncher::Client::planMemcpyDtoHRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::PlanMemcpyDtoHParams,  ::HookLauncher::PlanMemcpyDtoHResults>(
      0xb5d15336d30e0dd1ull, 3, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::planMemcpyDtoH(PlanMemcpyDtoHContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "planMemcpyDtoH",
      0xb5d15336d30e0dd1ull, 3);
}
::capnp::Request< ::HookLauncher::LaunchKernelParams,  ::HookLauncher::LaunchKernelResults>
HookLauncher::Client::launchKernelRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::LaunchKernelParams,  ::HookLauncher::LaunchKernelResults>(
      0xb5d15336d30e0dd1ull, 4, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::launchKernel(LaunchKernelContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "launchKernel",
      0xb5d15336d30e0dd1ull, 4);
}
::capnp::Request< ::HookLauncher::GetNodeStatusParams,  ::HookLauncher::GetNodeStatusResults>
HookLauncher::Client::getNodeStatusRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::GetNodeStatusParams,  ::HookLauncher::GetNodeStatusResults>(
      0xb5d15336d30e0dd1ull, 5, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::getNodeStatus(GetNodeStatusContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "getNodeStatus",
      0xb5d15336d30e0dd1ull, 5);
}
::capnp::Capability::Server::DispatchCallResult HookLauncher::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb5d15336d30e0dd1ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("hook-launcher.capnp:HookLauncher", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult HookLauncher::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        requestAllocation(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::RequestAllocationParams,  ::HookLauncher::RequestAllocationResults>(context)),
        false,
        false
      };
    case 1:
      return {
        requestFree(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::RequestFreeParams,  ::HookLauncher::RequestFreeResults>(context)),
        false,
        false
      };
    case 2:
      return {
        planMemcpyHtoD(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::PlanMemcpyHtoDParams,  ::HookLauncher::PlanMemcpyHtoDResults>(context)),
        false,
        false
      };
    case 3:
      return {
        planMemcpyDtoH(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::PlanMemcpyDtoHParams,  ::HookLauncher::PlanMemcpyDtoHResults>(context)),
        false,
        false
      };
    case 4:
      return {
        launchKernel(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::LaunchKernelParams,  ::HookLauncher::LaunchKernelResults>(context)),
        false,
        false
      };
    case 5:
      return {
        getNodeStatus(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::GetNodeStatusParams,  ::HookLauncher::GetNodeStatusResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "hook-launcher.capnp:HookLauncher",
          0xb5d15336d30e0dd1ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// HookLauncher
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::RequestAllocationParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::RequestAllocationParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::RequestAllocationParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::RequestAllocationParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::RequestAllocationParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::RequestAllocationResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::RequestAllocationResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::RequestAllocationResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::RequestAllocationResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::RequestAllocationResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::RequestFreeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::RequestFreeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::RequestFreeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::RequestFreeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::RequestFreeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::RequestFreeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::RequestFreeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::RequestFreeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::RequestFreeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::RequestFreeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::PlanMemcpyHtoDParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::PlanMemcpyHtoDParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::PlanMemcpyHtoDParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::PlanMemcpyHtoDParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::PlanMemcpyHtoDParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::PlanMemcpyHtoDResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::PlanMemcpyHtoDResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::PlanMemcpyHtoDResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::PlanMemcpyHtoDResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::PlanMemcpyHtoDResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::PlanMemcpyDtoHParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::PlanMemcpyDtoHParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::PlanMemcpyDtoHParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::PlanMemcpyDtoHParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::PlanMemcpyDtoHParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::PlanMemcpyDtoHResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::PlanMemcpyDtoHResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::PlanMemcpyDtoHResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::PlanMemcpyDtoHResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::PlanMemcpyDtoHResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::LaunchKernelParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::LaunchKernelParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::LaunchKernelParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::LaunchKernelParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::LaunchKernelParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::LaunchKernelResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::LaunchKernelResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::LaunchKernelResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::LaunchKernelResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::LaunchKernelResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::GetNodeStatusParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::GetNodeStatusParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::GetNodeStatusParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::GetNodeStatusParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::GetNodeStatusParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::GetNodeStatusResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::GetNodeStatusResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::GetNodeStatusResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::GetNodeStatusResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::GetNodeStatusResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



