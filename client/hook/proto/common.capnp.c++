// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: common.capnp

#include "common.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<64> b_846c49e52011ab72 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    114, 171,  17,  32, 229,  73, 108, 132,
     13,   0,   0,   0,   1,   0,   1,   0,
    240, 222, 239, 253, 222, 239, 253, 222,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     70,   0,   0,   0, 157,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  71, 112, 117,
     73, 110, 102, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    117, 117, 105, 100,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111, 116,  97, 108,  77, 101, 109,
    111, 114, 121,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_846c49e52011ab72 = b_846c49e52011ab72.words;
#if !CAPNP_LITE
static const uint16_t m_846c49e52011ab72[] = {1, 2, 0};
static const uint16_t i_846c49e52011ab72[] = {0, 1, 2};
const ::capnp::_::RawSchema s_846c49e52011ab72 = {
  0x846c49e52011ab72, b_846c49e52011ab72.words, 64, nullptr, m_846c49e52011ab72,
  0, 3, i_846c49e52011ab72, nullptr, nullptr, { &s_846c49e52011ab72, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<47> b_fd380f7aa4b3077d = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    125,   7, 179, 164, 122,  15,  56, 253,
     13,   0,   0,   0,   2,   0,   0,   0,
    240, 222, 239, 253, 222, 239, 253, 222,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  42,   1,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 151,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  69, 114, 114,
    111, 114,  67, 111, 100, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 107,   0,   0,   0,   0,   0,   0,
    111, 117, 116,  79, 102,  77, 101, 109,
    111, 114, 121,   0,   0,   0,   0,   0,
    103, 112, 117,  78, 111, 116,  70, 111,
    117, 110, 100,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,  69, 114,
    114, 111, 114,   0,   0,   0,   0,   0,
    107, 101, 114, 110, 101, 108,  76,  97,
    117, 110,  99, 104,  70,  97, 105, 108,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 110, 107, 110, 111, 119, 110,   0, }
};
::capnp::word const* const bp_fd380f7aa4b3077d = b_fd380f7aa4b3077d.words;
#if !CAPNP_LITE
static const uint16_t m_fd380f7aa4b3077d[] = {2, 4, 0, 1, 3, 5};
const ::capnp::_::RawSchema s_fd380f7aa4b3077d = {
  0xfd380f7aa4b3077d, b_fd380f7aa4b3077d.words, 47, nullptr, m_fd380f7aa4b3077d,
  0, 6, nullptr, nullptr, nullptr, { &s_fd380f7aa4b3077d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(ErrorCode_fd380f7aa4b3077d, fd380f7aa4b3077d);
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// GpuInfo
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuInfo::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuInfo::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



