// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: cuda.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1002000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "gpu-control.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d097e59a458bd5cf);
CAPNP_DECLARE_SCHEMA(aa64c42860eecf63);
CAPNP_DECLARE_SCHEMA(cf7152ec53c54e90);
enum class Direction_cf7152ec53c54e90: uint16_t {
  HOST_TO_DEVICE,
  DEVICE_TO_HOST,
  DEVICE_TO_DEVICE,
};
CAPNP_DECLARE_ENUM(Direction, cf7152ec53c54e90);
CAPNP_DECLARE_SCHEMA(ddb50ac56f50ec53);
CAPNP_DECLARE_SCHEMA(9de7a50f41d4cbd0);
CAPNP_DECLARE_SCHEMA(92bc15fb0d1fcb65);
CAPNP_DECLARE_SCHEMA(a0142208ca8277e0);
CAPNP_DECLARE_SCHEMA(8d60a68601cbd804);
CAPNP_DECLARE_SCHEMA(cc2802c3aee5a04a);
CAPNP_DECLARE_SCHEMA(b2bde6a78c1a0cb4);
CAPNP_DECLARE_SCHEMA(d909ac68956b8ff9);
CAPNP_DECLARE_SCHEMA(ba5df2daeb81d2b3);
CAPNP_DECLARE_SCHEMA(9541b3fbcfb24811);
CAPNP_DECLARE_SCHEMA(be2dd3871d6c54ce);
CAPNP_DECLARE_SCHEMA(9aa2f69630ae6c9c);
CAPNP_DECLARE_SCHEMA(bc316a0441cc04ac);
CAPNP_DECLARE_SCHEMA(d7b620c1f6580289);
CAPNP_DECLARE_SCHEMA(b2cda054826996c4);
CAPNP_DECLARE_SCHEMA(9edc1e0ed150e10c);
CAPNP_DECLARE_SCHEMA(e5bc2a6e0f80ad6b);
CAPNP_DECLARE_SCHEMA(f5ccd1fa43e677e4);
CAPNP_DECLARE_SCHEMA(d0ffebd0326acdf9);
CAPNP_DECLARE_SCHEMA(f05eef4dfede4f25);
CAPNP_DECLARE_SCHEMA(f8c19f0353a8733b);
CAPNP_DECLARE_SCHEMA(f3e39f6d897fe9e6);
CAPNP_DECLARE_SCHEMA(abebfa47b0d7fe3e);
CAPNP_DECLARE_SCHEMA(bb7aac664da39365);
CAPNP_DECLARE_SCHEMA(a494a6b17c5f502f);
CAPNP_DECLARE_SCHEMA(bf3a6b9bd266a840);
CAPNP_DECLARE_SCHEMA(a138b03743531536);
CAPNP_DECLARE_SCHEMA(a70d1ce069208328);
CAPNP_DECLARE_SCHEMA(b082d151f7e078f9);
CAPNP_DECLARE_SCHEMA(8aa89430a3b098a0);
CAPNP_DECLARE_SCHEMA(e9bfa3f610cdda88);
CAPNP_DECLARE_SCHEMA(819d132e990c800d);
CAPNP_DECLARE_SCHEMA(a58d7df87cb5c3bf);
CAPNP_DECLARE_SCHEMA(c15f783825e674b3);
CAPNP_DECLARE_SCHEMA(8cb1ea6893b2ef94);
CAPNP_DECLARE_SCHEMA(fbbcc94269ba6a08);

}  // namespace schemas
}  // namespace capnp


struct CudaMemInfo {
  CudaMemInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d097e59a458bd5cf, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MemcpyParams {
  MemcpyParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa64c42860eecf63, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::Direction_cf7152ec53c54e90 Direction;

struct StreamHandle {
  StreamHandle() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ddb50ac56f50ec53, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StreamCreateParams {
  StreamCreateParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9de7a50f41d4cbd0, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EventHandle {
  EventHandle() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92bc15fb0d1fcb65, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EventParams {
  EventParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0142208ca8277e0, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BatchRunRequest {
  BatchRunRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8d60a68601cbd804, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BatchRunResponse {
  BatchRunResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cc2802c3aee5a04a, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MultiGpuRequest {
  MultiGpuRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b2bde6a78c1a0cb4, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService {
  CudaService() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct CudaInitParams;
  struct CudaInitResults;
  struct CudaMemAllocParams;
  struct CudaMemAllocResults;
  struct CudaMemcpyParams;
  struct CudaMemcpyResults;
  struct CudaMemFreeParams;
  struct CudaMemFreeResults;
  struct CreateCudaStreamParams;
  struct CreateCudaStreamResults;
  struct DestroyCudaStreamParams;
  struct DestroyCudaStreamResults;
  struct SynchronizeCudaStreamParams;
  struct SynchronizeCudaStreamResults;
  struct CudaKernelLaunchParams;
  struct CudaKernelLaunchResults;
  struct CreateEventParams;
  struct CreateEventResults;
  struct RecordEventParams;
  struct RecordEventResults;
  struct EventSynchronizeParams;
  struct EventSynchronizeResults;
  struct DestroyEventParams;
  struct DestroyEventResults;
  struct BatchKernelLaunchParams;
  struct BatchKernelLaunchResults;
  struct MultiGpuCooperationParams;
  struct MultiGpuCooperationResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(d909ac68956b8ff9)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct CudaService::CudaInitParams {
  CudaInitParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba5df2daeb81d2b3, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CudaInitResults {
  CudaInitResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9541b3fbcfb24811, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CudaMemAllocParams {
  CudaMemAllocParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be2dd3871d6c54ce, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CudaMemAllocResults {
  CudaMemAllocResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9aa2f69630ae6c9c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CudaMemcpyParams {
  CudaMemcpyParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc316a0441cc04ac, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CudaMemcpyResults {
  CudaMemcpyResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d7b620c1f6580289, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CudaMemFreeParams {
  CudaMemFreeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b2cda054826996c4, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CudaMemFreeResults {
  CudaMemFreeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9edc1e0ed150e10c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CreateCudaStreamParams {
  CreateCudaStreamParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e5bc2a6e0f80ad6b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CreateCudaStreamResults {
  CreateCudaStreamResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5ccd1fa43e677e4, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::DestroyCudaStreamParams {
  DestroyCudaStreamParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0ffebd0326acdf9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::DestroyCudaStreamResults {
  DestroyCudaStreamResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f05eef4dfede4f25, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::SynchronizeCudaStreamParams {
  SynchronizeCudaStreamParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8c19f0353a8733b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::SynchronizeCudaStreamResults {
  SynchronizeCudaStreamResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3e39f6d897fe9e6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CudaKernelLaunchParams {
  CudaKernelLaunchParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(abebfa47b0d7fe3e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CudaKernelLaunchResults {
  CudaKernelLaunchResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb7aac664da39365, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CreateEventParams {
  CreateEventParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a494a6b17c5f502f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::CreateEventResults {
  CreateEventResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bf3a6b9bd266a840, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::RecordEventParams {
  RecordEventParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a138b03743531536, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::RecordEventResults {
  RecordEventResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a70d1ce069208328, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::EventSynchronizeParams {
  EventSynchronizeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b082d151f7e078f9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::EventSynchronizeResults {
  EventSynchronizeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8aa89430a3b098a0, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::DestroyEventParams {
  DestroyEventParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e9bfa3f610cdda88, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::DestroyEventResults {
  DestroyEventResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(819d132e990c800d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::BatchKernelLaunchParams {
  BatchKernelLaunchParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a58d7df87cb5c3bf, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::BatchKernelLaunchResults {
  BatchKernelLaunchResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c15f783825e674b3, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::MultiGpuCooperationParams {
  MultiGpuCooperationParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8cb1ea6893b2ef94, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CudaService::MultiGpuCooperationResults {
  MultiGpuCooperationResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fbbcc94269ba6a08, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CudaMemInfo::Reader {
public:
  typedef CudaMemInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getAddr() const;

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaMemInfo::Builder {
public:
  typedef CudaMemInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getAddr();
  inline void setAddr( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaMemInfo::Pipeline {
public:
  typedef CudaMemInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MemcpyParams::Reader {
public:
  typedef MemcpyParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSrc() const;

  inline  ::uint64_t getDst() const;

  inline  ::uint64_t getSize() const;

  inline  ::Direction getDirection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MemcpyParams::Builder {
public:
  typedef MemcpyParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSrc();
  inline void setSrc( ::uint64_t value);

  inline  ::uint64_t getDst();
  inline void setDst( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

  inline  ::Direction getDirection();
  inline void setDirection( ::Direction value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MemcpyParams::Pipeline {
public:
  typedef MemcpyParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StreamHandle::Reader {
public:
  typedef StreamHandle Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getHandle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StreamHandle::Builder {
public:
  typedef StreamHandle Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getHandle();
  inline void setHandle( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StreamHandle::Pipeline {
public:
  typedef StreamHandle Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StreamCreateParams::Reader {
public:
  typedef StreamCreateParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StreamCreateParams::Builder {
public:
  typedef StreamCreateParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StreamCreateParams::Pipeline {
public:
  typedef StreamCreateParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventHandle::Reader {
public:
  typedef EventHandle Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getHandle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventHandle::Builder {
public:
  typedef EventHandle Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getHandle();
  inline void setHandle( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventHandle::Pipeline {
public:
  typedef EventHandle Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventParams::Reader {
public:
  typedef EventParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventParams::Builder {
public:
  typedef EventParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventParams::Pipeline {
public:
  typedef EventParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BatchRunRequest::Reader {
public:
  typedef BatchRunRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRequests() const;
  inline  ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>::Reader getRequests() const;

  inline  ::uint64_t getStream() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BatchRunRequest::Builder {
public:
  typedef BatchRunRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRequests();
  inline  ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>::Builder getRequests();
  inline void setRequests( ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>::Builder initRequests(unsigned int size);
  inline void adoptRequests(::capnp::Orphan< ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>> disownRequests();

  inline  ::uint64_t getStream();
  inline void setStream( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BatchRunRequest::Pipeline {
public:
  typedef BatchRunRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BatchRunResponse::Reader {
public:
  typedef BatchRunResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasResponses() const;
  inline  ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>::Reader getResponses() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BatchRunResponse::Builder {
public:
  typedef BatchRunResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasResponses();
  inline  ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>::Builder getResponses();
  inline void setResponses( ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>::Builder initResponses(unsigned int size);
  inline void adoptResponses(::capnp::Orphan< ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>> disownResponses();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BatchRunResponse::Pipeline {
public:
  typedef BatchRunResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MultiGpuRequest::Reader {
public:
  typedef MultiGpuRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUuids() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getUuids() const;

  inline bool hasCommand() const;
  inline  ::capnp::Text::Reader getCommand() const;

  inline  ::uint64_t getStream() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MultiGpuRequest::Builder {
public:
  typedef MultiGpuRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUuids();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getUuids();
  inline void setUuids( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setUuids(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initUuids(unsigned int size);
  inline void adoptUuids(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownUuids();

  inline bool hasCommand();
  inline  ::capnp::Text::Builder getCommand();
  inline void setCommand( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCommand(unsigned int size);
  inline void adoptCommand(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCommand();

  inline  ::uint64_t getStream();
  inline void setStream( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MultiGpuRequest::Pipeline {
public:
  typedef MultiGpuRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class CudaService::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef CudaService Calls;
  typedef CudaService Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::CudaService::CudaInitParams,  ::CudaService::CudaInitResults> cudaInitRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::CudaMemAllocParams,  ::CudaService::CudaMemAllocResults> cudaMemAllocRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::CudaMemcpyParams,  ::CudaService::CudaMemcpyResults> cudaMemcpyRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::CudaMemFreeParams,  ::CudaService::CudaMemFreeResults> cudaMemFreeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::CreateCudaStreamParams,  ::CudaService::CreateCudaStreamResults> createCudaStreamRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::DestroyCudaStreamParams,  ::CudaService::DestroyCudaStreamResults> destroyCudaStreamRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::SynchronizeCudaStreamParams,  ::CudaService::SynchronizeCudaStreamResults> synchronizeCudaStreamRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::CudaKernelLaunchParams,  ::CudaService::CudaKernelLaunchResults> cudaKernelLaunchRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::CreateEventParams,  ::CudaService::CreateEventResults> createEventRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::RecordEventParams,  ::CudaService::RecordEventResults> recordEventRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::EventSynchronizeParams,  ::CudaService::EventSynchronizeResults> eventSynchronizeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::DestroyEventParams,  ::CudaService::DestroyEventResults> destroyEventRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::BatchKernelLaunchParams,  ::CudaService::BatchKernelLaunchResults> batchKernelLaunchRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::CudaService::MultiGpuCooperationParams,  ::CudaService::MultiGpuCooperationResults> multiGpuCooperationRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class CudaService::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef CudaService Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::CudaService::CudaInitParams CudaInitParams;
  typedef  ::CudaService::CudaInitResults CudaInitResults;
  typedef ::capnp::CallContext<CudaInitParams, CudaInitResults> CudaInitContext;
  virtual ::kj::Promise<void> cudaInit(CudaInitContext context);
  typedef  ::CudaService::CudaMemAllocParams CudaMemAllocParams;
  typedef  ::CudaService::CudaMemAllocResults CudaMemAllocResults;
  typedef ::capnp::CallContext<CudaMemAllocParams, CudaMemAllocResults> CudaMemAllocContext;
  virtual ::kj::Promise<void> cudaMemAlloc(CudaMemAllocContext context);
  typedef  ::CudaService::CudaMemcpyParams CudaMemcpyParams;
  typedef  ::CudaService::CudaMemcpyResults CudaMemcpyResults;
  typedef ::capnp::CallContext<CudaMemcpyParams, CudaMemcpyResults> CudaMemcpyContext;
  virtual ::kj::Promise<void> cudaMemcpy(CudaMemcpyContext context);
  typedef  ::CudaService::CudaMemFreeParams CudaMemFreeParams;
  typedef  ::CudaService::CudaMemFreeResults CudaMemFreeResults;
  typedef ::capnp::CallContext<CudaMemFreeParams, CudaMemFreeResults> CudaMemFreeContext;
  virtual ::kj::Promise<void> cudaMemFree(CudaMemFreeContext context);
  typedef  ::CudaService::CreateCudaStreamParams CreateCudaStreamParams;
  typedef  ::CudaService::CreateCudaStreamResults CreateCudaStreamResults;
  typedef ::capnp::CallContext<CreateCudaStreamParams, CreateCudaStreamResults> CreateCudaStreamContext;
  virtual ::kj::Promise<void> createCudaStream(CreateCudaStreamContext context);
  typedef  ::CudaService::DestroyCudaStreamParams DestroyCudaStreamParams;
  typedef  ::CudaService::DestroyCudaStreamResults DestroyCudaStreamResults;
  typedef ::capnp::CallContext<DestroyCudaStreamParams, DestroyCudaStreamResults> DestroyCudaStreamContext;
  virtual ::kj::Promise<void> destroyCudaStream(DestroyCudaStreamContext context);
  typedef  ::CudaService::SynchronizeCudaStreamParams SynchronizeCudaStreamParams;
  typedef  ::CudaService::SynchronizeCudaStreamResults SynchronizeCudaStreamResults;
  typedef ::capnp::CallContext<SynchronizeCudaStreamParams, SynchronizeCudaStreamResults> SynchronizeCudaStreamContext;
  virtual ::kj::Promise<void> synchronizeCudaStream(SynchronizeCudaStreamContext context);
  typedef  ::CudaService::CudaKernelLaunchParams CudaKernelLaunchParams;
  typedef  ::CudaService::CudaKernelLaunchResults CudaKernelLaunchResults;
  typedef ::capnp::CallContext<CudaKernelLaunchParams, CudaKernelLaunchResults> CudaKernelLaunchContext;
  virtual ::kj::Promise<void> cudaKernelLaunch(CudaKernelLaunchContext context);
  typedef  ::CudaService::CreateEventParams CreateEventParams;
  typedef  ::CudaService::CreateEventResults CreateEventResults;
  typedef ::capnp::CallContext<CreateEventParams, CreateEventResults> CreateEventContext;
  virtual ::kj::Promise<void> createEvent(CreateEventContext context);
  typedef  ::CudaService::RecordEventParams RecordEventParams;
  typedef  ::CudaService::RecordEventResults RecordEventResults;
  typedef ::capnp::CallContext<RecordEventParams, RecordEventResults> RecordEventContext;
  virtual ::kj::Promise<void> recordEvent(RecordEventContext context);
  typedef  ::CudaService::EventSynchronizeParams EventSynchronizeParams;
  typedef  ::CudaService::EventSynchronizeResults EventSynchronizeResults;
  typedef ::capnp::CallContext<EventSynchronizeParams, EventSynchronizeResults> EventSynchronizeContext;
  virtual ::kj::Promise<void> eventSynchronize(EventSynchronizeContext context);
  typedef  ::CudaService::DestroyEventParams DestroyEventParams;
  typedef  ::CudaService::DestroyEventResults DestroyEventResults;
  typedef ::capnp::CallContext<DestroyEventParams, DestroyEventResults> DestroyEventContext;
  virtual ::kj::Promise<void> destroyEvent(DestroyEventContext context);
  typedef  ::CudaService::BatchKernelLaunchParams BatchKernelLaunchParams;
  typedef  ::CudaService::BatchKernelLaunchResults BatchKernelLaunchResults;
  typedef ::capnp::CallContext<BatchKernelLaunchParams, BatchKernelLaunchResults> BatchKernelLaunchContext;
  virtual ::kj::Promise<void> batchKernelLaunch(BatchKernelLaunchContext context);
  typedef  ::CudaService::MultiGpuCooperationParams MultiGpuCooperationParams;
  typedef  ::CudaService::MultiGpuCooperationResults MultiGpuCooperationResults;
  typedef ::capnp::CallContext<MultiGpuCooperationParams, MultiGpuCooperationResults> MultiGpuCooperationContext;
  virtual ::kj::Promise<void> multiGpuCooperation(MultiGpuCooperationContext context);

  inline  ::CudaService::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::CudaService>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class CudaService::CudaInitParams::Reader {
public:
  typedef CudaInitParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CudaInitParams::Builder {
public:
  typedef CudaInitParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CudaInitParams::Pipeline {
public:
  typedef CudaInitParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CudaInitResults::Reader {
public:
  typedef CudaInitResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAck() const;
  inline  ::Ack::Reader getAck() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CudaInitResults::Builder {
public:
  typedef CudaInitResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAck();
  inline  ::Ack::Builder getAck();
  inline void setAck( ::Ack::Reader value);
  inline  ::Ack::Builder initAck();
  inline void adoptAck(::capnp::Orphan< ::Ack>&& value);
  inline ::capnp::Orphan< ::Ack> disownAck();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CudaInitResults::Pipeline {
public:
  typedef CudaInitResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ack::Pipeline getAck();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CudaMemAllocParams::Reader {
public:
  typedef CudaMemAllocParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasInfo() const;
  inline  ::CudaMemInfo::Reader getInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CudaMemAllocParams::Builder {
public:
  typedef CudaMemAllocParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasInfo();
  inline  ::CudaMemInfo::Builder getInfo();
  inline void setInfo( ::CudaMemInfo::Reader value);
  inline  ::CudaMemInfo::Builder initInfo();
  inline void adoptInfo(::capnp::Orphan< ::CudaMemInfo>&& value);
  inline ::capnp::Orphan< ::CudaMemInfo> disownInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CudaMemAllocParams::Pipeline {
public:
  typedef CudaMemAllocParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::CudaMemInfo::Pipeline getInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CudaMemAllocResults::Reader {
public:
  typedef CudaMemAllocResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasResult() const;
  inline  ::CudaMemInfo::Reader getResult() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CudaMemAllocResults::Builder {
public:
  typedef CudaMemAllocResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasResult();
  inline  ::CudaMemInfo::Builder getResult();
  inline void setResult( ::CudaMemInfo::Reader value);
  inline  ::CudaMemInfo::Builder initResult();
  inline void adoptResult(::capnp::Orphan< ::CudaMemInfo>&& value);
  inline ::capnp::Orphan< ::CudaMemInfo> disownResult();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CudaMemAllocResults::Pipeline {
public:
  typedef CudaMemAllocResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::CudaMemInfo::Pipeline getResult();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CudaMemcpyParams::Reader {
public:
  typedef CudaMemcpyParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasParams() const;
  inline  ::MemcpyParams::Reader getParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CudaMemcpyParams::Builder {
public:
  typedef CudaMemcpyParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParams();
  inline  ::MemcpyParams::Builder getParams();
  inline void setParams( ::MemcpyParams::Reader value);
  inline  ::MemcpyParams::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::MemcpyParams>&& value);
  inline ::capnp::Orphan< ::MemcpyParams> disownParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CudaMemcpyParams::Pipeline {
public:
  typedef CudaMemcpyParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::MemcpyParams::Pipeline getParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CudaMemcpyResults::Reader {
public:
  typedef CudaMemcpyResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAck() const;
  inline  ::Ack::Reader getAck() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CudaMemcpyResults::Builder {
public:
  typedef CudaMemcpyResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAck();
  inline  ::Ack::Builder getAck();
  inline void setAck( ::Ack::Reader value);
  inline  ::Ack::Builder initAck();
  inline void adoptAck(::capnp::Orphan< ::Ack>&& value);
  inline ::capnp::Orphan< ::Ack> disownAck();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CudaMemcpyResults::Pipeline {
public:
  typedef CudaMemcpyResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ack::Pipeline getAck();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CudaMemFreeParams::Reader {
public:
  typedef CudaMemFreeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasInfo() const;
  inline  ::CudaMemInfo::Reader getInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CudaMemFreeParams::Builder {
public:
  typedef CudaMemFreeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasInfo();
  inline  ::CudaMemInfo::Builder getInfo();
  inline void setInfo( ::CudaMemInfo::Reader value);
  inline  ::CudaMemInfo::Builder initInfo();
  inline void adoptInfo(::capnp::Orphan< ::CudaMemInfo>&& value);
  inline ::capnp::Orphan< ::CudaMemInfo> disownInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CudaMemFreeParams::Pipeline {
public:
  typedef CudaMemFreeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::CudaMemInfo::Pipeline getInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CudaMemFreeResults::Reader {
public:
  typedef CudaMemFreeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAck() const;
  inline  ::Ack::Reader getAck() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CudaMemFreeResults::Builder {
public:
  typedef CudaMemFreeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAck();
  inline  ::Ack::Builder getAck();
  inline void setAck( ::Ack::Reader value);
  inline  ::Ack::Builder initAck();
  inline void adoptAck(::capnp::Orphan< ::Ack>&& value);
  inline ::capnp::Orphan< ::Ack> disownAck();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CudaMemFreeResults::Pipeline {
public:
  typedef CudaMemFreeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ack::Pipeline getAck();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CreateCudaStreamParams::Reader {
public:
  typedef CreateCudaStreamParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasParams() const;
  inline  ::StreamCreateParams::Reader getParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CreateCudaStreamParams::Builder {
public:
  typedef CreateCudaStreamParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParams();
  inline  ::StreamCreateParams::Builder getParams();
  inline void setParams( ::StreamCreateParams::Reader value);
  inline  ::StreamCreateParams::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::StreamCreateParams>&& value);
  inline ::capnp::Orphan< ::StreamCreateParams> disownParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CreateCudaStreamParams::Pipeline {
public:
  typedef CreateCudaStreamParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::StreamCreateParams::Pipeline getParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CreateCudaStreamResults::Reader {
public:
  typedef CreateCudaStreamResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
  inline  ::StreamHandle::Reader getHandle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CreateCudaStreamResults::Builder {
public:
  typedef CreateCudaStreamResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
  inline  ::StreamHandle::Builder getHandle();
  inline void setHandle( ::StreamHandle::Reader value);
  inline  ::StreamHandle::Builder initHandle();
  inline void adoptHandle(::capnp::Orphan< ::StreamHandle>&& value);
  inline ::capnp::Orphan< ::StreamHandle> disownHandle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CreateCudaStreamResults::Pipeline {
public:
  typedef CreateCudaStreamResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::StreamHandle::Pipeline getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::DestroyCudaStreamParams::Reader {
public:
  typedef DestroyCudaStreamParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
  inline  ::StreamHandle::Reader getHandle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::DestroyCudaStreamParams::Builder {
public:
  typedef DestroyCudaStreamParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
  inline  ::StreamHandle::Builder getHandle();
  inline void setHandle( ::StreamHandle::Reader value);
  inline  ::StreamHandle::Builder initHandle();
  inline void adoptHandle(::capnp::Orphan< ::StreamHandle>&& value);
  inline ::capnp::Orphan< ::StreamHandle> disownHandle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::DestroyCudaStreamParams::Pipeline {
public:
  typedef DestroyCudaStreamParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::StreamHandle::Pipeline getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::DestroyCudaStreamResults::Reader {
public:
  typedef DestroyCudaStreamResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAck() const;
  inline  ::Ack::Reader getAck() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::DestroyCudaStreamResults::Builder {
public:
  typedef DestroyCudaStreamResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAck();
  inline  ::Ack::Builder getAck();
  inline void setAck( ::Ack::Reader value);
  inline  ::Ack::Builder initAck();
  inline void adoptAck(::capnp::Orphan< ::Ack>&& value);
  inline ::capnp::Orphan< ::Ack> disownAck();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::DestroyCudaStreamResults::Pipeline {
public:
  typedef DestroyCudaStreamResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ack::Pipeline getAck();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::SynchronizeCudaStreamParams::Reader {
public:
  typedef SynchronizeCudaStreamParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
  inline  ::StreamHandle::Reader getHandle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::SynchronizeCudaStreamParams::Builder {
public:
  typedef SynchronizeCudaStreamParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
  inline  ::StreamHandle::Builder getHandle();
  inline void setHandle( ::StreamHandle::Reader value);
  inline  ::StreamHandle::Builder initHandle();
  inline void adoptHandle(::capnp::Orphan< ::StreamHandle>&& value);
  inline ::capnp::Orphan< ::StreamHandle> disownHandle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::SynchronizeCudaStreamParams::Pipeline {
public:
  typedef SynchronizeCudaStreamParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::StreamHandle::Pipeline getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::SynchronizeCudaStreamResults::Reader {
public:
  typedef SynchronizeCudaStreamResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAck() const;
  inline  ::Ack::Reader getAck() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::SynchronizeCudaStreamResults::Builder {
public:
  typedef SynchronizeCudaStreamResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAck();
  inline  ::Ack::Builder getAck();
  inline void setAck( ::Ack::Reader value);
  inline  ::Ack::Builder initAck();
  inline void adoptAck(::capnp::Orphan< ::Ack>&& value);
  inline ::capnp::Orphan< ::Ack> disownAck();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::SynchronizeCudaStreamResults::Pipeline {
public:
  typedef SynchronizeCudaStreamResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ack::Pipeline getAck();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CudaKernelLaunchParams::Reader {
public:
  typedef CudaKernelLaunchParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRequest() const;
  inline  ::RunRequest::Reader getRequest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CudaKernelLaunchParams::Builder {
public:
  typedef CudaKernelLaunchParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRequest();
  inline  ::RunRequest::Builder getRequest();
  inline void setRequest( ::RunRequest::Reader value);
  inline  ::RunRequest::Builder initRequest();
  inline void adoptRequest(::capnp::Orphan< ::RunRequest>&& value);
  inline ::capnp::Orphan< ::RunRequest> disownRequest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CudaKernelLaunchParams::Pipeline {
public:
  typedef CudaKernelLaunchParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RunRequest::Pipeline getRequest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CudaKernelLaunchResults::Reader {
public:
  typedef CudaKernelLaunchResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasResponse() const;
  inline  ::RunResponse::Reader getResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CudaKernelLaunchResults::Builder {
public:
  typedef CudaKernelLaunchResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasResponse();
  inline  ::RunResponse::Builder getResponse();
  inline void setResponse( ::RunResponse::Reader value);
  inline  ::RunResponse::Builder initResponse();
  inline void adoptResponse(::capnp::Orphan< ::RunResponse>&& value);
  inline ::capnp::Orphan< ::RunResponse> disownResponse();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CudaKernelLaunchResults::Pipeline {
public:
  typedef CudaKernelLaunchResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RunResponse::Pipeline getResponse();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CreateEventParams::Reader {
public:
  typedef CreateEventParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasParams() const;
  inline  ::EventParams::Reader getParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CreateEventParams::Builder {
public:
  typedef CreateEventParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParams();
  inline  ::EventParams::Builder getParams();
  inline void setParams( ::EventParams::Reader value);
  inline  ::EventParams::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::EventParams>&& value);
  inline ::capnp::Orphan< ::EventParams> disownParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CreateEventParams::Pipeline {
public:
  typedef CreateEventParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::EventParams::Pipeline getParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::CreateEventResults::Reader {
public:
  typedef CreateEventResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
  inline  ::EventHandle::Reader getHandle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::CreateEventResults::Builder {
public:
  typedef CreateEventResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
  inline  ::EventHandle::Builder getHandle();
  inline void setHandle( ::EventHandle::Reader value);
  inline  ::EventHandle::Builder initHandle();
  inline void adoptHandle(::capnp::Orphan< ::EventHandle>&& value);
  inline ::capnp::Orphan< ::EventHandle> disownHandle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::CreateEventResults::Pipeline {
public:
  typedef CreateEventResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::EventHandle::Pipeline getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::RecordEventParams::Reader {
public:
  typedef RecordEventParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
  inline  ::EventHandle::Reader getHandle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::RecordEventParams::Builder {
public:
  typedef RecordEventParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
  inline  ::EventHandle::Builder getHandle();
  inline void setHandle( ::EventHandle::Reader value);
  inline  ::EventHandle::Builder initHandle();
  inline void adoptHandle(::capnp::Orphan< ::EventHandle>&& value);
  inline ::capnp::Orphan< ::EventHandle> disownHandle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::RecordEventParams::Pipeline {
public:
  typedef RecordEventParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::EventHandle::Pipeline getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::RecordEventResults::Reader {
public:
  typedef RecordEventResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAck() const;
  inline  ::Ack::Reader getAck() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::RecordEventResults::Builder {
public:
  typedef RecordEventResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAck();
  inline  ::Ack::Builder getAck();
  inline void setAck( ::Ack::Reader value);
  inline  ::Ack::Builder initAck();
  inline void adoptAck(::capnp::Orphan< ::Ack>&& value);
  inline ::capnp::Orphan< ::Ack> disownAck();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::RecordEventResults::Pipeline {
public:
  typedef RecordEventResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ack::Pipeline getAck();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::EventSynchronizeParams::Reader {
public:
  typedef EventSynchronizeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
  inline  ::EventHandle::Reader getHandle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::EventSynchronizeParams::Builder {
public:
  typedef EventSynchronizeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
  inline  ::EventHandle::Builder getHandle();
  inline void setHandle( ::EventHandle::Reader value);
  inline  ::EventHandle::Builder initHandle();
  inline void adoptHandle(::capnp::Orphan< ::EventHandle>&& value);
  inline ::capnp::Orphan< ::EventHandle> disownHandle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::EventSynchronizeParams::Pipeline {
public:
  typedef EventSynchronizeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::EventHandle::Pipeline getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::EventSynchronizeResults::Reader {
public:
  typedef EventSynchronizeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAck() const;
  inline  ::Ack::Reader getAck() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::EventSynchronizeResults::Builder {
public:
  typedef EventSynchronizeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAck();
  inline  ::Ack::Builder getAck();
  inline void setAck( ::Ack::Reader value);
  inline  ::Ack::Builder initAck();
  inline void adoptAck(::capnp::Orphan< ::Ack>&& value);
  inline ::capnp::Orphan< ::Ack> disownAck();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::EventSynchronizeResults::Pipeline {
public:
  typedef EventSynchronizeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ack::Pipeline getAck();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::DestroyEventParams::Reader {
public:
  typedef DestroyEventParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHandle() const;
  inline  ::EventHandle::Reader getHandle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::DestroyEventParams::Builder {
public:
  typedef DestroyEventParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHandle();
  inline  ::EventHandle::Builder getHandle();
  inline void setHandle( ::EventHandle::Reader value);
  inline  ::EventHandle::Builder initHandle();
  inline void adoptHandle(::capnp::Orphan< ::EventHandle>&& value);
  inline ::capnp::Orphan< ::EventHandle> disownHandle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::DestroyEventParams::Pipeline {
public:
  typedef DestroyEventParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::EventHandle::Pipeline getHandle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::DestroyEventResults::Reader {
public:
  typedef DestroyEventResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAck() const;
  inline  ::Ack::Reader getAck() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::DestroyEventResults::Builder {
public:
  typedef DestroyEventResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAck();
  inline  ::Ack::Builder getAck();
  inline void setAck( ::Ack::Reader value);
  inline  ::Ack::Builder initAck();
  inline void adoptAck(::capnp::Orphan< ::Ack>&& value);
  inline ::capnp::Orphan< ::Ack> disownAck();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::DestroyEventResults::Pipeline {
public:
  typedef DestroyEventResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ack::Pipeline getAck();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::BatchKernelLaunchParams::Reader {
public:
  typedef BatchKernelLaunchParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRequest() const;
  inline  ::BatchRunRequest::Reader getRequest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::BatchKernelLaunchParams::Builder {
public:
  typedef BatchKernelLaunchParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRequest();
  inline  ::BatchRunRequest::Builder getRequest();
  inline void setRequest( ::BatchRunRequest::Reader value);
  inline  ::BatchRunRequest::Builder initRequest();
  inline void adoptRequest(::capnp::Orphan< ::BatchRunRequest>&& value);
  inline ::capnp::Orphan< ::BatchRunRequest> disownRequest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::BatchKernelLaunchParams::Pipeline {
public:
  typedef BatchKernelLaunchParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::BatchRunRequest::Pipeline getRequest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::BatchKernelLaunchResults::Reader {
public:
  typedef BatchKernelLaunchResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasResponse() const;
  inline  ::BatchRunResponse::Reader getResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::BatchKernelLaunchResults::Builder {
public:
  typedef BatchKernelLaunchResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasResponse();
  inline  ::BatchRunResponse::Builder getResponse();
  inline void setResponse( ::BatchRunResponse::Reader value);
  inline  ::BatchRunResponse::Builder initResponse();
  inline void adoptResponse(::capnp::Orphan< ::BatchRunResponse>&& value);
  inline ::capnp::Orphan< ::BatchRunResponse> disownResponse();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::BatchKernelLaunchResults::Pipeline {
public:
  typedef BatchKernelLaunchResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::BatchRunResponse::Pipeline getResponse();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::MultiGpuCooperationParams::Reader {
public:
  typedef MultiGpuCooperationParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRequest() const;
  inline  ::MultiGpuRequest::Reader getRequest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::MultiGpuCooperationParams::Builder {
public:
  typedef MultiGpuCooperationParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRequest();
  inline  ::MultiGpuRequest::Builder getRequest();
  inline void setRequest( ::MultiGpuRequest::Reader value);
  inline  ::MultiGpuRequest::Builder initRequest();
  inline void adoptRequest(::capnp::Orphan< ::MultiGpuRequest>&& value);
  inline ::capnp::Orphan< ::MultiGpuRequest> disownRequest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::MultiGpuCooperationParams::Pipeline {
public:
  typedef MultiGpuCooperationParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::MultiGpuRequest::Pipeline getRequest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CudaService::MultiGpuCooperationResults::Reader {
public:
  typedef MultiGpuCooperationResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAck() const;
  inline  ::Ack::Reader getAck() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CudaService::MultiGpuCooperationResults::Builder {
public:
  typedef MultiGpuCooperationResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAck();
  inline  ::Ack::Builder getAck();
  inline void setAck( ::Ack::Reader value);
  inline  ::Ack::Builder initAck();
  inline void adoptAck(::capnp::Orphan< ::Ack>&& value);
  inline ::capnp::Orphan< ::Ack> disownAck();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CudaService::MultiGpuCooperationResults::Pipeline {
public:
  typedef MultiGpuCooperationResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Ack::Pipeline getAck();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t CudaMemInfo::Reader::getAddr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CudaMemInfo::Builder::getAddr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CudaMemInfo::Builder::setAddr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CudaMemInfo::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CudaMemInfo::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CudaMemInfo::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MemcpyParams::Reader::getSrc() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MemcpyParams::Builder::getSrc() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MemcpyParams::Builder::setSrc( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MemcpyParams::Reader::getDst() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MemcpyParams::Builder::getDst() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MemcpyParams::Builder::setDst( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MemcpyParams::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MemcpyParams::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MemcpyParams::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::Direction MemcpyParams::Reader::getDirection() const {
  return _reader.getDataField< ::Direction>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::Direction MemcpyParams::Builder::getDirection() {
  return _builder.getDataField< ::Direction>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void MemcpyParams::Builder::setDirection( ::Direction value) {
  _builder.setDataField< ::Direction>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StreamHandle::Reader::getHandle() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StreamHandle::Builder::getHandle() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StreamHandle::Builder::setHandle( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t StreamCreateParams::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t StreamCreateParams::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StreamCreateParams::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EventHandle::Reader::getHandle() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EventHandle::Builder::getHandle() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EventHandle::Builder::setHandle( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EventParams::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EventParams::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EventParams::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool BatchRunRequest::Reader::hasRequests() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BatchRunRequest::Builder::hasRequests() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>::Reader BatchRunRequest::Reader::getRequests() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>::Builder BatchRunRequest::Builder::getRequests() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BatchRunRequest::Builder::setRequests( ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>::Builder BatchRunRequest::Builder::initRequests(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BatchRunRequest::Builder::adoptRequests(
    ::capnp::Orphan< ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>> BatchRunRequest::Builder::disownRequests() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RunRequest,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t BatchRunRequest::Reader::getStream() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t BatchRunRequest::Builder::getStream() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BatchRunRequest::Builder::setStream( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool BatchRunResponse::Reader::hasResponses() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BatchRunResponse::Builder::hasResponses() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>::Reader BatchRunResponse::Reader::getResponses() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>::Builder BatchRunResponse::Builder::getResponses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BatchRunResponse::Builder::setResponses( ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>::Builder BatchRunResponse::Builder::initResponses(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BatchRunResponse::Builder::adoptResponses(
    ::capnp::Orphan< ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>> BatchRunResponse::Builder::disownResponses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RunResponse,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MultiGpuRequest::Reader::hasUuids() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MultiGpuRequest::Builder::hasUuids() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader MultiGpuRequest::Reader::getUuids() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder MultiGpuRequest::Builder::getUuids() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MultiGpuRequest::Builder::setUuids( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void MultiGpuRequest::Builder::setUuids(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder MultiGpuRequest::Builder::initUuids(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MultiGpuRequest::Builder::adoptUuids(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> MultiGpuRequest::Builder::disownUuids() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MultiGpuRequest::Reader::hasCommand() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MultiGpuRequest::Builder::hasCommand() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MultiGpuRequest::Reader::getCommand() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MultiGpuRequest::Builder::getCommand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MultiGpuRequest::Builder::setCommand( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MultiGpuRequest::Builder::initCommand(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void MultiGpuRequest::Builder::adoptCommand(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MultiGpuRequest::Builder::disownCommand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t MultiGpuRequest::Reader::getStream() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MultiGpuRequest::Builder::getStream() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MultiGpuRequest::Builder::setStream( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

#if !CAPNP_LITE
inline CudaService::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline CudaService::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline CudaService::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline CudaService::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline CudaService::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::CudaService::Client& CudaService::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::CudaService::Client& CudaService::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool CudaService::CudaInitResults::Reader::hasAck() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CudaInitResults::Builder::hasAck() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ack::Reader CudaService::CudaInitResults::Reader::getAck() const {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ack::Builder CudaService::CudaInitResults::Builder::getAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ack::Pipeline CudaService::CudaInitResults::Pipeline::getAck() {
  return  ::Ack::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CudaInitResults::Builder::setAck( ::Ack::Reader value) {
  ::capnp::_::PointerHelpers< ::Ack>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ack::Builder CudaService::CudaInitResults::Builder::initAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CudaInitResults::Builder::adoptAck(
    ::capnp::Orphan< ::Ack>&& value) {
  ::capnp::_::PointerHelpers< ::Ack>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ack> CudaService::CudaInitResults::Builder::disownAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CudaMemAllocParams::Reader::hasInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CudaMemAllocParams::Builder::hasInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::CudaMemInfo::Reader CudaService::CudaMemAllocParams::Reader::getInfo() const {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::CudaMemInfo::Builder CudaService::CudaMemAllocParams::Builder::getInfo() {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::CudaMemInfo::Pipeline CudaService::CudaMemAllocParams::Pipeline::getInfo() {
  return  ::CudaMemInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CudaMemAllocParams::Builder::setInfo( ::CudaMemInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::CudaMemInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::CudaMemInfo::Builder CudaService::CudaMemAllocParams::Builder::initInfo() {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CudaMemAllocParams::Builder::adoptInfo(
    ::capnp::Orphan< ::CudaMemInfo>&& value) {
  ::capnp::_::PointerHelpers< ::CudaMemInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::CudaMemInfo> CudaService::CudaMemAllocParams::Builder::disownInfo() {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CudaMemAllocResults::Reader::hasResult() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CudaMemAllocResults::Builder::hasResult() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::CudaMemInfo::Reader CudaService::CudaMemAllocResults::Reader::getResult() const {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::CudaMemInfo::Builder CudaService::CudaMemAllocResults::Builder::getResult() {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::CudaMemInfo::Pipeline CudaService::CudaMemAllocResults::Pipeline::getResult() {
  return  ::CudaMemInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CudaMemAllocResults::Builder::setResult( ::CudaMemInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::CudaMemInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::CudaMemInfo::Builder CudaService::CudaMemAllocResults::Builder::initResult() {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CudaMemAllocResults::Builder::adoptResult(
    ::capnp::Orphan< ::CudaMemInfo>&& value) {
  ::capnp::_::PointerHelpers< ::CudaMemInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::CudaMemInfo> CudaService::CudaMemAllocResults::Builder::disownResult() {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CudaMemcpyParams::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CudaMemcpyParams::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::MemcpyParams::Reader CudaService::CudaMemcpyParams::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::MemcpyParams>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::MemcpyParams::Builder CudaService::CudaMemcpyParams::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::MemcpyParams>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::MemcpyParams::Pipeline CudaService::CudaMemcpyParams::Pipeline::getParams() {
  return  ::MemcpyParams::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CudaMemcpyParams::Builder::setParams( ::MemcpyParams::Reader value) {
  ::capnp::_::PointerHelpers< ::MemcpyParams>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::MemcpyParams::Builder CudaService::CudaMemcpyParams::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::MemcpyParams>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CudaMemcpyParams::Builder::adoptParams(
    ::capnp::Orphan< ::MemcpyParams>&& value) {
  ::capnp::_::PointerHelpers< ::MemcpyParams>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::MemcpyParams> CudaService::CudaMemcpyParams::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::MemcpyParams>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CudaMemcpyResults::Reader::hasAck() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CudaMemcpyResults::Builder::hasAck() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ack::Reader CudaService::CudaMemcpyResults::Reader::getAck() const {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ack::Builder CudaService::CudaMemcpyResults::Builder::getAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ack::Pipeline CudaService::CudaMemcpyResults::Pipeline::getAck() {
  return  ::Ack::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CudaMemcpyResults::Builder::setAck( ::Ack::Reader value) {
  ::capnp::_::PointerHelpers< ::Ack>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ack::Builder CudaService::CudaMemcpyResults::Builder::initAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CudaMemcpyResults::Builder::adoptAck(
    ::capnp::Orphan< ::Ack>&& value) {
  ::capnp::_::PointerHelpers< ::Ack>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ack> CudaService::CudaMemcpyResults::Builder::disownAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CudaMemFreeParams::Reader::hasInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CudaMemFreeParams::Builder::hasInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::CudaMemInfo::Reader CudaService::CudaMemFreeParams::Reader::getInfo() const {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::CudaMemInfo::Builder CudaService::CudaMemFreeParams::Builder::getInfo() {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::CudaMemInfo::Pipeline CudaService::CudaMemFreeParams::Pipeline::getInfo() {
  return  ::CudaMemInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CudaMemFreeParams::Builder::setInfo( ::CudaMemInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::CudaMemInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::CudaMemInfo::Builder CudaService::CudaMemFreeParams::Builder::initInfo() {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CudaMemFreeParams::Builder::adoptInfo(
    ::capnp::Orphan< ::CudaMemInfo>&& value) {
  ::capnp::_::PointerHelpers< ::CudaMemInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::CudaMemInfo> CudaService::CudaMemFreeParams::Builder::disownInfo() {
  return ::capnp::_::PointerHelpers< ::CudaMemInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CudaMemFreeResults::Reader::hasAck() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CudaMemFreeResults::Builder::hasAck() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ack::Reader CudaService::CudaMemFreeResults::Reader::getAck() const {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ack::Builder CudaService::CudaMemFreeResults::Builder::getAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ack::Pipeline CudaService::CudaMemFreeResults::Pipeline::getAck() {
  return  ::Ack::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CudaMemFreeResults::Builder::setAck( ::Ack::Reader value) {
  ::capnp::_::PointerHelpers< ::Ack>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ack::Builder CudaService::CudaMemFreeResults::Builder::initAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CudaMemFreeResults::Builder::adoptAck(
    ::capnp::Orphan< ::Ack>&& value) {
  ::capnp::_::PointerHelpers< ::Ack>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ack> CudaService::CudaMemFreeResults::Builder::disownAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CreateCudaStreamParams::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CreateCudaStreamParams::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::StreamCreateParams::Reader CudaService::CreateCudaStreamParams::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::StreamCreateParams>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::StreamCreateParams::Builder CudaService::CreateCudaStreamParams::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::StreamCreateParams>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::StreamCreateParams::Pipeline CudaService::CreateCudaStreamParams::Pipeline::getParams() {
  return  ::StreamCreateParams::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CreateCudaStreamParams::Builder::setParams( ::StreamCreateParams::Reader value) {
  ::capnp::_::PointerHelpers< ::StreamCreateParams>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::StreamCreateParams::Builder CudaService::CreateCudaStreamParams::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::StreamCreateParams>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CreateCudaStreamParams::Builder::adoptParams(
    ::capnp::Orphan< ::StreamCreateParams>&& value) {
  ::capnp::_::PointerHelpers< ::StreamCreateParams>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::StreamCreateParams> CudaService::CreateCudaStreamParams::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::StreamCreateParams>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CreateCudaStreamResults::Reader::hasHandle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CreateCudaStreamResults::Builder::hasHandle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::StreamHandle::Reader CudaService::CreateCudaStreamResults::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::StreamHandle::Builder CudaService::CreateCudaStreamResults::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::StreamHandle::Pipeline CudaService::CreateCudaStreamResults::Pipeline::getHandle() {
  return  ::StreamHandle::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CreateCudaStreamResults::Builder::setHandle( ::StreamHandle::Reader value) {
  ::capnp::_::PointerHelpers< ::StreamHandle>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::StreamHandle::Builder CudaService::CreateCudaStreamResults::Builder::initHandle() {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CreateCudaStreamResults::Builder::adoptHandle(
    ::capnp::Orphan< ::StreamHandle>&& value) {
  ::capnp::_::PointerHelpers< ::StreamHandle>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::StreamHandle> CudaService::CreateCudaStreamResults::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::DestroyCudaStreamParams::Reader::hasHandle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::DestroyCudaStreamParams::Builder::hasHandle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::StreamHandle::Reader CudaService::DestroyCudaStreamParams::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::StreamHandle::Builder CudaService::DestroyCudaStreamParams::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::StreamHandle::Pipeline CudaService::DestroyCudaStreamParams::Pipeline::getHandle() {
  return  ::StreamHandle::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::DestroyCudaStreamParams::Builder::setHandle( ::StreamHandle::Reader value) {
  ::capnp::_::PointerHelpers< ::StreamHandle>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::StreamHandle::Builder CudaService::DestroyCudaStreamParams::Builder::initHandle() {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::DestroyCudaStreamParams::Builder::adoptHandle(
    ::capnp::Orphan< ::StreamHandle>&& value) {
  ::capnp::_::PointerHelpers< ::StreamHandle>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::StreamHandle> CudaService::DestroyCudaStreamParams::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::DestroyCudaStreamResults::Reader::hasAck() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::DestroyCudaStreamResults::Builder::hasAck() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ack::Reader CudaService::DestroyCudaStreamResults::Reader::getAck() const {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ack::Builder CudaService::DestroyCudaStreamResults::Builder::getAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ack::Pipeline CudaService::DestroyCudaStreamResults::Pipeline::getAck() {
  return  ::Ack::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::DestroyCudaStreamResults::Builder::setAck( ::Ack::Reader value) {
  ::capnp::_::PointerHelpers< ::Ack>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ack::Builder CudaService::DestroyCudaStreamResults::Builder::initAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::DestroyCudaStreamResults::Builder::adoptAck(
    ::capnp::Orphan< ::Ack>&& value) {
  ::capnp::_::PointerHelpers< ::Ack>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ack> CudaService::DestroyCudaStreamResults::Builder::disownAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::SynchronizeCudaStreamParams::Reader::hasHandle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::SynchronizeCudaStreamParams::Builder::hasHandle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::StreamHandle::Reader CudaService::SynchronizeCudaStreamParams::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::StreamHandle::Builder CudaService::SynchronizeCudaStreamParams::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::StreamHandle::Pipeline CudaService::SynchronizeCudaStreamParams::Pipeline::getHandle() {
  return  ::StreamHandle::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::SynchronizeCudaStreamParams::Builder::setHandle( ::StreamHandle::Reader value) {
  ::capnp::_::PointerHelpers< ::StreamHandle>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::StreamHandle::Builder CudaService::SynchronizeCudaStreamParams::Builder::initHandle() {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::SynchronizeCudaStreamParams::Builder::adoptHandle(
    ::capnp::Orphan< ::StreamHandle>&& value) {
  ::capnp::_::PointerHelpers< ::StreamHandle>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::StreamHandle> CudaService::SynchronizeCudaStreamParams::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::StreamHandle>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::SynchronizeCudaStreamResults::Reader::hasAck() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::SynchronizeCudaStreamResults::Builder::hasAck() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ack::Reader CudaService::SynchronizeCudaStreamResults::Reader::getAck() const {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ack::Builder CudaService::SynchronizeCudaStreamResults::Builder::getAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ack::Pipeline CudaService::SynchronizeCudaStreamResults::Pipeline::getAck() {
  return  ::Ack::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::SynchronizeCudaStreamResults::Builder::setAck( ::Ack::Reader value) {
  ::capnp::_::PointerHelpers< ::Ack>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ack::Builder CudaService::SynchronizeCudaStreamResults::Builder::initAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::SynchronizeCudaStreamResults::Builder::adoptAck(
    ::capnp::Orphan< ::Ack>&& value) {
  ::capnp::_::PointerHelpers< ::Ack>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ack> CudaService::SynchronizeCudaStreamResults::Builder::disownAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CudaKernelLaunchParams::Reader::hasRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CudaKernelLaunchParams::Builder::hasRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::RunRequest::Reader CudaService::CudaKernelLaunchParams::Reader::getRequest() const {
  return ::capnp::_::PointerHelpers< ::RunRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::RunRequest::Builder CudaService::CudaKernelLaunchParams::Builder::getRequest() {
  return ::capnp::_::PointerHelpers< ::RunRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RunRequest::Pipeline CudaService::CudaKernelLaunchParams::Pipeline::getRequest() {
  return  ::RunRequest::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CudaKernelLaunchParams::Builder::setRequest( ::RunRequest::Reader value) {
  ::capnp::_::PointerHelpers< ::RunRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::RunRequest::Builder CudaService::CudaKernelLaunchParams::Builder::initRequest() {
  return ::capnp::_::PointerHelpers< ::RunRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CudaKernelLaunchParams::Builder::adoptRequest(
    ::capnp::Orphan< ::RunRequest>&& value) {
  ::capnp::_::PointerHelpers< ::RunRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RunRequest> CudaService::CudaKernelLaunchParams::Builder::disownRequest() {
  return ::capnp::_::PointerHelpers< ::RunRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CudaKernelLaunchResults::Reader::hasResponse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CudaKernelLaunchResults::Builder::hasResponse() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::RunResponse::Reader CudaService::CudaKernelLaunchResults::Reader::getResponse() const {
  return ::capnp::_::PointerHelpers< ::RunResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::RunResponse::Builder CudaService::CudaKernelLaunchResults::Builder::getResponse() {
  return ::capnp::_::PointerHelpers< ::RunResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RunResponse::Pipeline CudaService::CudaKernelLaunchResults::Pipeline::getResponse() {
  return  ::RunResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CudaKernelLaunchResults::Builder::setResponse( ::RunResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::RunResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::RunResponse::Builder CudaService::CudaKernelLaunchResults::Builder::initResponse() {
  return ::capnp::_::PointerHelpers< ::RunResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CudaKernelLaunchResults::Builder::adoptResponse(
    ::capnp::Orphan< ::RunResponse>&& value) {
  ::capnp::_::PointerHelpers< ::RunResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RunResponse> CudaService::CudaKernelLaunchResults::Builder::disownResponse() {
  return ::capnp::_::PointerHelpers< ::RunResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CreateEventParams::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CreateEventParams::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::EventParams::Reader CudaService::CreateEventParams::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::EventParams>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::EventParams::Builder CudaService::CreateEventParams::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::EventParams>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::EventParams::Pipeline CudaService::CreateEventParams::Pipeline::getParams() {
  return  ::EventParams::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CreateEventParams::Builder::setParams( ::EventParams::Reader value) {
  ::capnp::_::PointerHelpers< ::EventParams>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::EventParams::Builder CudaService::CreateEventParams::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::EventParams>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CreateEventParams::Builder::adoptParams(
    ::capnp::Orphan< ::EventParams>&& value) {
  ::capnp::_::PointerHelpers< ::EventParams>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::EventParams> CudaService::CreateEventParams::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::EventParams>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::CreateEventResults::Reader::hasHandle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::CreateEventResults::Builder::hasHandle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::EventHandle::Reader CudaService::CreateEventResults::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::EventHandle>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::EventHandle::Builder CudaService::CreateEventResults::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::EventHandle::Pipeline CudaService::CreateEventResults::Pipeline::getHandle() {
  return  ::EventHandle::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::CreateEventResults::Builder::setHandle( ::EventHandle::Reader value) {
  ::capnp::_::PointerHelpers< ::EventHandle>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::EventHandle::Builder CudaService::CreateEventResults::Builder::initHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::CreateEventResults::Builder::adoptHandle(
    ::capnp::Orphan< ::EventHandle>&& value) {
  ::capnp::_::PointerHelpers< ::EventHandle>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::EventHandle> CudaService::CreateEventResults::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::RecordEventParams::Reader::hasHandle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::RecordEventParams::Builder::hasHandle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::EventHandle::Reader CudaService::RecordEventParams::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::EventHandle>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::EventHandle::Builder CudaService::RecordEventParams::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::EventHandle::Pipeline CudaService::RecordEventParams::Pipeline::getHandle() {
  return  ::EventHandle::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::RecordEventParams::Builder::setHandle( ::EventHandle::Reader value) {
  ::capnp::_::PointerHelpers< ::EventHandle>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::EventHandle::Builder CudaService::RecordEventParams::Builder::initHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::RecordEventParams::Builder::adoptHandle(
    ::capnp::Orphan< ::EventHandle>&& value) {
  ::capnp::_::PointerHelpers< ::EventHandle>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::EventHandle> CudaService::RecordEventParams::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::RecordEventResults::Reader::hasAck() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::RecordEventResults::Builder::hasAck() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ack::Reader CudaService::RecordEventResults::Reader::getAck() const {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ack::Builder CudaService::RecordEventResults::Builder::getAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ack::Pipeline CudaService::RecordEventResults::Pipeline::getAck() {
  return  ::Ack::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::RecordEventResults::Builder::setAck( ::Ack::Reader value) {
  ::capnp::_::PointerHelpers< ::Ack>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ack::Builder CudaService::RecordEventResults::Builder::initAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::RecordEventResults::Builder::adoptAck(
    ::capnp::Orphan< ::Ack>&& value) {
  ::capnp::_::PointerHelpers< ::Ack>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ack> CudaService::RecordEventResults::Builder::disownAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::EventSynchronizeParams::Reader::hasHandle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::EventSynchronizeParams::Builder::hasHandle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::EventHandle::Reader CudaService::EventSynchronizeParams::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::EventHandle>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::EventHandle::Builder CudaService::EventSynchronizeParams::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::EventHandle::Pipeline CudaService::EventSynchronizeParams::Pipeline::getHandle() {
  return  ::EventHandle::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::EventSynchronizeParams::Builder::setHandle( ::EventHandle::Reader value) {
  ::capnp::_::PointerHelpers< ::EventHandle>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::EventHandle::Builder CudaService::EventSynchronizeParams::Builder::initHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::EventSynchronizeParams::Builder::adoptHandle(
    ::capnp::Orphan< ::EventHandle>&& value) {
  ::capnp::_::PointerHelpers< ::EventHandle>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::EventHandle> CudaService::EventSynchronizeParams::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::EventSynchronizeResults::Reader::hasAck() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::EventSynchronizeResults::Builder::hasAck() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ack::Reader CudaService::EventSynchronizeResults::Reader::getAck() const {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ack::Builder CudaService::EventSynchronizeResults::Builder::getAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ack::Pipeline CudaService::EventSynchronizeResults::Pipeline::getAck() {
  return  ::Ack::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::EventSynchronizeResults::Builder::setAck( ::Ack::Reader value) {
  ::capnp::_::PointerHelpers< ::Ack>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ack::Builder CudaService::EventSynchronizeResults::Builder::initAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::EventSynchronizeResults::Builder::adoptAck(
    ::capnp::Orphan< ::Ack>&& value) {
  ::capnp::_::PointerHelpers< ::Ack>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ack> CudaService::EventSynchronizeResults::Builder::disownAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::DestroyEventParams::Reader::hasHandle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::DestroyEventParams::Builder::hasHandle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::EventHandle::Reader CudaService::DestroyEventParams::Reader::getHandle() const {
  return ::capnp::_::PointerHelpers< ::EventHandle>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::EventHandle::Builder CudaService::DestroyEventParams::Builder::getHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::EventHandle::Pipeline CudaService::DestroyEventParams::Pipeline::getHandle() {
  return  ::EventHandle::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::DestroyEventParams::Builder::setHandle( ::EventHandle::Reader value) {
  ::capnp::_::PointerHelpers< ::EventHandle>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::EventHandle::Builder CudaService::DestroyEventParams::Builder::initHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::DestroyEventParams::Builder::adoptHandle(
    ::capnp::Orphan< ::EventHandle>&& value) {
  ::capnp::_::PointerHelpers< ::EventHandle>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::EventHandle> CudaService::DestroyEventParams::Builder::disownHandle() {
  return ::capnp::_::PointerHelpers< ::EventHandle>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::DestroyEventResults::Reader::hasAck() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::DestroyEventResults::Builder::hasAck() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ack::Reader CudaService::DestroyEventResults::Reader::getAck() const {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ack::Builder CudaService::DestroyEventResults::Builder::getAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ack::Pipeline CudaService::DestroyEventResults::Pipeline::getAck() {
  return  ::Ack::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::DestroyEventResults::Builder::setAck( ::Ack::Reader value) {
  ::capnp::_::PointerHelpers< ::Ack>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ack::Builder CudaService::DestroyEventResults::Builder::initAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::DestroyEventResults::Builder::adoptAck(
    ::capnp::Orphan< ::Ack>&& value) {
  ::capnp::_::PointerHelpers< ::Ack>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ack> CudaService::DestroyEventResults::Builder::disownAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::BatchKernelLaunchParams::Reader::hasRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::BatchKernelLaunchParams::Builder::hasRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::BatchRunRequest::Reader CudaService::BatchKernelLaunchParams::Reader::getRequest() const {
  return ::capnp::_::PointerHelpers< ::BatchRunRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::BatchRunRequest::Builder CudaService::BatchKernelLaunchParams::Builder::getRequest() {
  return ::capnp::_::PointerHelpers< ::BatchRunRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::BatchRunRequest::Pipeline CudaService::BatchKernelLaunchParams::Pipeline::getRequest() {
  return  ::BatchRunRequest::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::BatchKernelLaunchParams::Builder::setRequest( ::BatchRunRequest::Reader value) {
  ::capnp::_::PointerHelpers< ::BatchRunRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::BatchRunRequest::Builder CudaService::BatchKernelLaunchParams::Builder::initRequest() {
  return ::capnp::_::PointerHelpers< ::BatchRunRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::BatchKernelLaunchParams::Builder::adoptRequest(
    ::capnp::Orphan< ::BatchRunRequest>&& value) {
  ::capnp::_::PointerHelpers< ::BatchRunRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::BatchRunRequest> CudaService::BatchKernelLaunchParams::Builder::disownRequest() {
  return ::capnp::_::PointerHelpers< ::BatchRunRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::BatchKernelLaunchResults::Reader::hasResponse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::BatchKernelLaunchResults::Builder::hasResponse() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::BatchRunResponse::Reader CudaService::BatchKernelLaunchResults::Reader::getResponse() const {
  return ::capnp::_::PointerHelpers< ::BatchRunResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::BatchRunResponse::Builder CudaService::BatchKernelLaunchResults::Builder::getResponse() {
  return ::capnp::_::PointerHelpers< ::BatchRunResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::BatchRunResponse::Pipeline CudaService::BatchKernelLaunchResults::Pipeline::getResponse() {
  return  ::BatchRunResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::BatchKernelLaunchResults::Builder::setResponse( ::BatchRunResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::BatchRunResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::BatchRunResponse::Builder CudaService::BatchKernelLaunchResults::Builder::initResponse() {
  return ::capnp::_::PointerHelpers< ::BatchRunResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::BatchKernelLaunchResults::Builder::adoptResponse(
    ::capnp::Orphan< ::BatchRunResponse>&& value) {
  ::capnp::_::PointerHelpers< ::BatchRunResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::BatchRunResponse> CudaService::BatchKernelLaunchResults::Builder::disownResponse() {
  return ::capnp::_::PointerHelpers< ::BatchRunResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::MultiGpuCooperationParams::Reader::hasRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::MultiGpuCooperationParams::Builder::hasRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::MultiGpuRequest::Reader CudaService::MultiGpuCooperationParams::Reader::getRequest() const {
  return ::capnp::_::PointerHelpers< ::MultiGpuRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::MultiGpuRequest::Builder CudaService::MultiGpuCooperationParams::Builder::getRequest() {
  return ::capnp::_::PointerHelpers< ::MultiGpuRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::MultiGpuRequest::Pipeline CudaService::MultiGpuCooperationParams::Pipeline::getRequest() {
  return  ::MultiGpuRequest::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::MultiGpuCooperationParams::Builder::setRequest( ::MultiGpuRequest::Reader value) {
  ::capnp::_::PointerHelpers< ::MultiGpuRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::MultiGpuRequest::Builder CudaService::MultiGpuCooperationParams::Builder::initRequest() {
  return ::capnp::_::PointerHelpers< ::MultiGpuRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::MultiGpuCooperationParams::Builder::adoptRequest(
    ::capnp::Orphan< ::MultiGpuRequest>&& value) {
  ::capnp::_::PointerHelpers< ::MultiGpuRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::MultiGpuRequest> CudaService::MultiGpuCooperationParams::Builder::disownRequest() {
  return ::capnp::_::PointerHelpers< ::MultiGpuRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CudaService::MultiGpuCooperationResults::Reader::hasAck() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CudaService::MultiGpuCooperationResults::Builder::hasAck() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Ack::Reader CudaService::MultiGpuCooperationResults::Reader::getAck() const {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Ack::Builder CudaService::MultiGpuCooperationResults::Builder::getAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Ack::Pipeline CudaService::MultiGpuCooperationResults::Pipeline::getAck() {
  return  ::Ack::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CudaService::MultiGpuCooperationResults::Builder::setAck( ::Ack::Reader value) {
  ::capnp::_::PointerHelpers< ::Ack>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Ack::Builder CudaService::MultiGpuCooperationResults::Builder::initAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CudaService::MultiGpuCooperationResults::Builder::adoptAck(
    ::capnp::Orphan< ::Ack>&& value) {
  ::capnp::_::PointerHelpers< ::Ack>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Ack> CudaService::MultiGpuCooperationResults::Builder::disownAck() {
  return ::capnp::_::PointerHelpers< ::Ack>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

