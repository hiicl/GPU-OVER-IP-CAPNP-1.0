// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: gpu-control.capnp

#include "gpu-control.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<38> b_b5f8f6cc208cb766 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    102, 183, 140,  32, 204, 246, 248, 181,
     18,   0,   0,   0,   1,   0,   0,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 160,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  76, 105, 115,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    103, 112, 117, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    114, 171,  17,  32, 229,  73, 108, 132,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b5f8f6cc208cb766 = b_b5f8f6cc208cb766.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b5f8f6cc208cb766[] = {
  &s_846c49e52011ab72,
};
static const uint16_t m_b5f8f6cc208cb766[] = {0};
static const uint16_t i_b5f8f6cc208cb766[] = {0};
const ::capnp::_::RawSchema s_b5f8f6cc208cb766 = {
  0xb5f8f6cc208cb766, b_b5f8f6cc208cb766.words, 38, d_b5f8f6cc208cb766, m_b5f8f6cc208cb766,
  1, 1, i_b5f8f6cc208cb766, nullptr, nullptr, { &s_b5f8f6cc208cb766, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e4f103179b354701 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
      1,  71,  53, 155,  23,   3, 241, 228,
     18,   0,   0,   0,   1,   0,   0,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0, 213,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  82, 101, 113,
    117, 101, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    117, 117, 105, 100,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4f103179b354701 = b_e4f103179b354701.words;
#if !CAPNP_LITE
static const uint16_t m_e4f103179b354701[] = {0};
static const uint16_t i_e4f103179b354701[] = {0};
const ::capnp::_::RawSchema s_e4f103179b354701 = {
  0xe4f103179b354701, b_e4f103179b354701.words, 34, nullptr, m_e4f103179b354701,
  0, 1, i_e4f103179b354701, nullptr, nullptr, { &s_e4f103179b354701, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_bfb92316876e4204 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
      4,  66, 110, 135,  22,  35, 185, 191,
     18,   0,   0,   0,   1,   0,   2,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,  37,   1,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 116,  97,
    116, 117, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 100,  77, 101, 109, 111,
    114, 121,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 116, 105, 108, 105, 122,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bfb92316876e4204 = b_bfb92316876e4204.words;
#if !CAPNP_LITE
static const uint16_t m_bfb92316876e4204[] = {0, 1};
static const uint16_t i_bfb92316876e4204[] = {0, 1};
const ::capnp::_::RawSchema s_bfb92316876e4204 = {
  0xbfb92316876e4204, b_bfb92316876e4204.words, 51, nullptr, m_bfb92316876e4204,
  0, 2, i_bfb92316876e4204, nullptr, nullptr, { &s_bfb92316876e4204, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<63> b_bc3c3b70ac18c60f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     15, 198,  24, 172, 112,  59,  60, 188,
     18,   0,   0,   0,   1,   0,   1,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   1,   0,   0, 125,   1,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  65,  99, 107,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    111, 107,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 100, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    125,   7, 179, 164, 122,  15,  56, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc3c3b70ac18c60f = b_bc3c3b70ac18c60f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bc3c3b70ac18c60f[] = {
  &s_fd380f7aa4b3077d,
};
static const uint16_t m_bc3c3b70ac18c60f[] = {2, 1, 0};
static const uint16_t i_bc3c3b70ac18c60f[] = {0, 1, 2};
const ::capnp::_::RawSchema s_bc3c3b70ac18c60f = {
  0xbc3c3b70ac18c60f, b_bc3c3b70ac18c60f.words, 63, d_bc3c3b70ac18c60f, m_bc3c3b70ac18c60f,
  1, 3, i_bc3c3b70ac18c60f, nullptr, nullptr, { &s_bc3c3b70ac18c60f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_b94f7935e9a4d8a6 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    166, 216, 164, 233,  53, 121,  79, 185,
     18,   0,   0,   0,   1,   0,   1,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   1,   0,   0, 234,   1,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  82, 117, 110,  82, 101, 113,
    117, 101, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    117, 117, 105, 100,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 109, 100,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,  72,  97,
    110, 100, 108, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b94f7935e9a4d8a6 = b_b94f7935e9a4d8a6.words;
#if !CAPNP_LITE
static const uint16_t m_b94f7935e9a4d8a6[] = {1, 2, 0};
static const uint16_t i_b94f7935e9a4d8a6[] = {0, 1, 2};
const ::capnp::_::RawSchema s_b94f7935e9a4d8a6 = {
  0xb94f7935e9a4d8a6, b_b94f7935e9a4d8a6.words, 65, nullptr, m_b94f7935e9a4d8a6,
  0, 3, i_b94f7935e9a4d8a6, nullptr, nullptr, { &s_b94f7935e9a4d8a6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_d50832f599bb96f4 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    244, 150, 187, 153, 245,  50,   8, 213,
     18,   0,   0,   0,   1,   0,   1,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    238,   1,   0,   0,  52,   2,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  82, 117, 110,  82, 101, 115,
    112, 111, 110, 115, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    101, 120, 105, 116,  67, 111, 100, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116, 112, 117, 116,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d50832f599bb96f4 = b_d50832f599bb96f4.words;
#if !CAPNP_LITE
static const uint16_t m_d50832f599bb96f4[] = {0, 1};
static const uint16_t i_d50832f599bb96f4[] = {0, 1};
const ::capnp::_::RawSchema s_d50832f599bb96f4 = {
  0xd50832f599bb96f4, b_d50832f599bb96f4.words, 50, nullptr, m_d50832f599bb96f4,
  0, 2, i_d50832f599bb96f4, nullptr, nullptr, { &s_d50832f599bb96f4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_d55a8aa154796958 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     88, 105, 121,  84, 161, 138,  90, 213,
     18,   0,   0,   0,   1,   0,   1,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   2,   0,   0, 187,   2,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  80,  97, 116, 104,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    152, 164, 154,  45, 221, 125,  58, 164,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 101, 112, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     81, 214, 109, 112,  83, 110,  53, 192,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  97, 110, 100, 119, 105, 100, 116,
    104,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d55a8aa154796958 = b_d55a8aa154796958.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d55a8aa154796958[] = {
  &s_a43a7ddd2d9aa498,
  &s_c0356e53706dd651,
};
static const uint16_t m_d55a8aa154796958[] = {2, 1, 0};
static const uint16_t i_d55a8aa154796958[] = {0, 1, 2};
const ::capnp::_::RawSchema s_d55a8aa154796958 = {
  0xd55a8aa154796958, b_d55a8aa154796958.words, 68, d_d55a8aa154796958, m_d55a8aa154796958,
  2, 3, i_d55a8aa154796958, nullptr, nullptr, { &s_d55a8aa154796958, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_c0356e53706dd651 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     81, 214, 109, 112,  83, 110,  53, 192,
     18,   0,   0,   0,   1,   0,   1,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    191,   2,   0,   0,  32,   3,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83, 116, 101, 112,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    100, 101, 118, 105,  99, 101,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 109,  84, 121, 112, 101,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    165, 231,   9, 228, 250,  59, 103, 162,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 117, 109,  97,  78, 111, 100, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c0356e53706dd651 = b_c0356e53706dd651.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c0356e53706dd651[] = {
  &s_a2673bfae409e7a5,
};
static const uint16_t m_c0356e53706dd651[] = {0, 1, 2};
static const uint16_t i_c0356e53706dd651[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c0356e53706dd651 = {
  0xc0356e53706dd651, b_c0356e53706dd651.words, 64, d_c0356e53706dd651, m_c0356e53706dd651,
  1, 3, i_c0356e53706dd651, nullptr, nullptr, { &s_c0356e53706dd651, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_a43a7ddd2d9aa498 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    152, 164, 154,  45, 221, 125,  58, 164,
     18,   0,   0,   0,   2,   0,   0,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   3,   0,   0,  98,   3,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  80,  97, 116, 104,  84, 121,
    112, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 118, 108, 105, 110, 107,   0,   0,
    120,  98, 117, 115,   0,   0,   0,   0,
    114, 111,  99, 101,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a43a7ddd2d9aa498 = b_a43a7ddd2d9aa498.words;
#if !CAPNP_LITE
static const uint16_t m_a43a7ddd2d9aa498[] = {0, 2, 1};
const ::capnp::_::RawSchema s_a43a7ddd2d9aa498 = {
  0xa43a7ddd2d9aa498, b_a43a7ddd2d9aa498.words, 31, nullptr, m_a43a7ddd2d9aa498,
  0, 3, nullptr, nullptr, nullptr, { &s_a43a7ddd2d9aa498, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(PathType_a43a7ddd2d9aa498, a43a7ddd2d9aa498);
static const ::capnp::_::AlignedData<31> b_a2673bfae409e7a5 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    165, 231,   9, 228, 250,  59, 103, 162,
     18,   0,   0,   0,   2,   0,   0,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,   3,   0,   0, 166,   3,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  77, 101, 109,  84, 121, 112,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 118, 105,  99, 101,   0,   0,
    104, 111, 115, 116,   0,   0,   0,   0,
    117, 110, 105, 102, 105, 101, 100,   0, }
};
::capnp::word const* const bp_a2673bfae409e7a5 = b_a2673bfae409e7a5.words;
#if !CAPNP_LITE
static const uint16_t m_a2673bfae409e7a5[] = {0, 1, 2};
const ::capnp::_::RawSchema s_a2673bfae409e7a5 = {
  0xa2673bfae409e7a5, b_a2673bfae409e7a5.words, 31, nullptr, m_a2673bfae409e7a5,
  0, 3, nullptr, nullptr, nullptr, { &s_a2673bfae409e7a5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(MemType_a2673bfae409e7a5, a2673bfae409e7a5);
static const ::capnp::_::AlignedData<66> b_ada0409ba8ac33f9 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    249,  51, 172, 168, 155,  64, 160, 173,
     18,   0,   0,   0,   1,   0,   2,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    170,   3,   0,   0,  16,   4,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  77, 101, 116, 114, 105,  99,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
    116, 104, 114, 111, 117, 103, 104, 112,
    117, 116,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,  97, 116, 101, 110,  99, 121,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,  82,  97, 116,
    101,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ada0409ba8ac33f9 = b_ada0409ba8ac33f9.words;
#if !CAPNP_LITE
static const uint16_t m_ada0409ba8ac33f9[] = {2, 1, 0};
static const uint16_t i_ada0409ba8ac33f9[] = {0, 1, 2};
const ::capnp::_::RawSchema s_ada0409ba8ac33f9 = {
  0xada0409ba8ac33f9, b_ada0409ba8ac33f9.words, 66, nullptr, m_ada0409ba8ac33f9,
  0, 3, i_ada0409ba8ac33f9, nullptr, nullptr, { &s_ada0409ba8ac33f9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<108> b_ef8cb4fe563986d6 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    214, 134,  57,  86, 254, 180, 140, 239,
     18,   0,   0,   0,   3,   0,   0,   0,
    118, 152, 175, 250, 206, 161, 204, 204,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     50,   4,   0,   0,  89,   6,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,   7,   2,   0,   0,
    125,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     32,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    123,  33, 213,  71,  97, 183, 236, 185,
    127,  21, 240,  82, 196, 151, 179, 164,
    241,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     37, 116, 208,  45,  50, 137, 110, 230,
      1,   4, 130, 189,  82,  88, 185, 237,
    221,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    202, 186, 235, 233, 200,  49, 238, 249,
     52, 152, 162, 250, 220,  84,  22, 198,
    201,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    165, 175, 225, 169, 206, 169, 213, 195,
     30, 152, 162, 217,  81,  82,  80, 150,
    181,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    221,  51, 179,   2, 136, 121, 187, 228,
    181, 118, 222, 199, 148, 193, 232, 136,
    161,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    141, 116,  62, 216,  58, 138,  86, 181,
     36, 239, 247, 172,  76, 162,  49, 128,
    141,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    166, 122, 113, 218,  43,  64, 163, 128,
     71, 170, 139, 160,  94, 186, 148, 153,
    121,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     84, 220, 215, 219, 215, 233,  92, 172,
    254, 118,  96,   9,  80,  45, 207, 148,
    101,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 113, 117, 101, 115, 116,  80,
     97, 116, 104,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 112, 111, 114, 116,  77, 101,
    116, 114, 105,  99, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 103, 105, 115, 116, 101, 114,
     71, 112, 117,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 105, 115, 116,  71, 112, 117, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  71, 112, 117,  83, 116,
     97, 116, 117, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97,  99, 113, 117, 105, 114, 101,  71,
    112, 117,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 108, 101,  97, 115, 101,  71,
    112, 117,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 117, 110,  67, 111, 109, 109,  97,
    110, 100,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ef8cb4fe563986d6 = b_ef8cb4fe563986d6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ef8cb4fe563986d6[] = {
  &s_8031a24cacf7ef24,
  &s_80a3402bda717aa6,
  &s_88e8c194c7de76b5,
  &s_94cf2d50096076fe,
  &s_96505251d9a2981e,
  &s_9994ba5ea08baa47,
  &s_a4b397c452f0157f,
  &s_ac5ce9d7dbd7dc54,
  &s_b5568a3ad83e748d,
  &s_b9ecb76147d5217b,
  &s_c3d5a9cea9e1afa5,
  &s_c61654dcfaa29834,
  &s_e4bb798802b333dd,
  &s_e66e89322dd07425,
  &s_edb95852bd820401,
  &s_f9ee31c8e9ebbaca,
};
static const uint16_t m_ef8cb4fe563986d6[] = {5, 4, 3, 2, 6, 1, 0, 7};
const ::capnp::_::RawSchema s_ef8cb4fe563986d6 = {
  0xef8cb4fe563986d6, b_ef8cb4fe563986d6.words, 108, d_ef8cb4fe563986d6, m_ef8cb4fe563986d6,
  16, 8, nullptr, nullptr, nullptr, { &s_ef8cb4fe563986d6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_b9ecb76147d5217b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    123,  33, 213,  71,  97, 183, 236, 185,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 114, 101, 113, 117,
    101, 115, 116,  80,  97, 116, 104,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    115, 114,  99,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 115, 116,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9ecb76147d5217b = b_b9ecb76147d5217b.words;
#if !CAPNP_LITE
static const uint16_t m_b9ecb76147d5217b[] = {1, 0};
static const uint16_t i_b9ecb76147d5217b[] = {0, 1};
const ::capnp::_::RawSchema s_b9ecb76147d5217b = {
  0xb9ecb76147d5217b, b_b9ecb76147d5217b.words, 50, nullptr, m_b9ecb76147d5217b,
  0, 2, i_b9ecb76147d5217b, nullptr, nullptr, { &s_b9ecb76147d5217b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a4b397c452f0157f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    127,  21, 240,  82, 196, 151, 179, 164,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 114, 101, 113, 117,
    101, 115, 116,  80,  97, 116, 104,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     88, 105, 121,  84, 161, 138,  90, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a4b397c452f0157f = b_a4b397c452f0157f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a4b397c452f0157f[] = {
  &s_d55a8aa154796958,
};
static const uint16_t m_a4b397c452f0157f[] = {0};
static const uint16_t i_a4b397c452f0157f[] = {0};
const ::capnp::_::RawSchema s_a4b397c452f0157f = {
  0xa4b397c452f0157f, b_a4b397c452f0157f.words, 35, d_a4b397c452f0157f, m_a4b397c452f0157f,
  1, 1, i_a4b397c452f0157f, nullptr, nullptr, { &s_a4b397c452f0157f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_e66e89322dd07425 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     37, 116, 208,  45,  50, 137, 110, 230,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 114, 101, 112, 111,
    114, 116,  77, 101, 116, 114, 105,  99,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 116, 114, 105,  99, 115,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    249,  51, 172, 168, 155,  64, 160, 173,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e66e89322dd07425 = b_e66e89322dd07425.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e66e89322dd07425[] = {
  &s_ada0409ba8ac33f9,
};
static const uint16_t m_e66e89322dd07425[] = {0};
static const uint16_t i_e66e89322dd07425[] = {0};
const ::capnp::_::RawSchema s_e66e89322dd07425 = {
  0xe66e89322dd07425, b_e66e89322dd07425.words, 36, d_e66e89322dd07425, m_e66e89322dd07425,
  1, 1, i_e66e89322dd07425, nullptr, nullptr, { &s_e66e89322dd07425, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_edb95852bd820401 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
      1,   4, 130, 189,  82,  88, 185, 237,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 114, 101, 112, 111,
    114, 116,  77, 101, 116, 114, 105,  99,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_edb95852bd820401 = b_edb95852bd820401.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_edb95852bd820401 = {
  0xedb95852bd820401, b_edb95852bd820401.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_edb95852bd820401, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f9ee31c8e9ebbaca = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    202, 186, 235, 233, 200,  49, 238, 249,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 114, 101, 103, 105,
    115, 116, 101, 114,  71, 112, 117,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    114, 171,  17,  32, 229,  73, 108, 132,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f9ee31c8e9ebbaca = b_f9ee31c8e9ebbaca.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f9ee31c8e9ebbaca[] = {
  &s_846c49e52011ab72,
};
static const uint16_t m_f9ee31c8e9ebbaca[] = {0};
static const uint16_t i_f9ee31c8e9ebbaca[] = {0};
const ::capnp::_::RawSchema s_f9ee31c8e9ebbaca = {
  0xf9ee31c8e9ebbaca, b_f9ee31c8e9ebbaca.words, 35, d_f9ee31c8e9ebbaca, m_f9ee31c8e9ebbaca,
  1, 1, i_f9ee31c8e9ebbaca, nullptr, nullptr, { &s_f9ee31c8e9ebbaca, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c61654dcfaa29834 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     52, 152, 162, 250, 220,  84,  22, 198,
     28,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 114, 101, 103, 105,
    115, 116, 101, 114,  71, 112, 117,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c61654dcfaa29834 = b_c61654dcfaa29834.words;
#if !CAPNP_LITE
static const uint16_t m_c61654dcfaa29834[] = {0};
static const uint16_t i_c61654dcfaa29834[] = {0};
const ::capnp::_::RawSchema s_c61654dcfaa29834 = {
  0xc61654dcfaa29834, b_c61654dcfaa29834.words, 35, nullptr, m_c61654dcfaa29834,
  0, 1, i_c61654dcfaa29834, nullptr, nullptr, { &s_c61654dcfaa29834, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_c3d5a9cea9e1afa5 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    165, 175, 225, 169, 206, 169, 213, 195,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 108, 105, 115, 116,
     71, 112, 117, 115,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c3d5a9cea9e1afa5 = b_c3d5a9cea9e1afa5.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c3d5a9cea9e1afa5 = {
  0xc3d5a9cea9e1afa5, b_c3d5a9cea9e1afa5.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c3d5a9cea9e1afa5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_96505251d9a2981e = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     30, 152, 162, 217,  81,  82,  80, 150,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 108, 105, 115, 116,
     71, 112, 117, 115,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    103, 112, 117, 115,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    102, 183, 140,  32, 204, 246, 248, 181,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_96505251d9a2981e = b_96505251d9a2981e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_96505251d9a2981e[] = {
  &s_b5f8f6cc208cb766,
};
static const uint16_t m_96505251d9a2981e[] = {0};
static const uint16_t i_96505251d9a2981e[] = {0};
const ::capnp::_::RawSchema s_96505251d9a2981e = {
  0x96505251d9a2981e, b_96505251d9a2981e.words, 35, d_96505251d9a2981e, m_96505251d9a2981e,
  1, 1, i_96505251d9a2981e, nullptr, nullptr, { &s_96505251d9a2981e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e4bb798802b333dd = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    221,  51, 179,   2, 136, 121, 187, 228,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 103, 101, 116,  71,
    112, 117,  83, 116,  97, 116, 117, 115,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      1,  71,  53, 155,  23,   3, 241, 228,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4bb798802b333dd = b_e4bb798802b333dd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e4bb798802b333dd[] = {
  &s_e4f103179b354701,
};
static const uint16_t m_e4bb798802b333dd[] = {0};
static const uint16_t i_e4bb798802b333dd[] = {0};
const ::capnp::_::RawSchema s_e4bb798802b333dd = {
  0xe4bb798802b333dd, b_e4bb798802b333dd.words, 35, d_e4bb798802b333dd, m_e4bb798802b333dd,
  1, 1, i_e4bb798802b333dd, nullptr, nullptr, { &s_e4bb798802b333dd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_88e8c194c7de76b5 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    181, 118, 222, 199, 148, 193, 232, 136,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 103, 101, 116,  71,
    112, 117,  83, 116,  97, 116, 117, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 116,  97, 116, 117, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      4,  66, 110, 135,  22,  35, 185, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_88e8c194c7de76b5 = b_88e8c194c7de76b5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_88e8c194c7de76b5[] = {
  &s_bfb92316876e4204,
};
static const uint16_t m_88e8c194c7de76b5[] = {0};
static const uint16_t i_88e8c194c7de76b5[] = {0};
const ::capnp::_::RawSchema s_88e8c194c7de76b5 = {
  0x88e8c194c7de76b5, b_88e8c194c7de76b5.words, 36, d_88e8c194c7de76b5, m_88e8c194c7de76b5,
  1, 1, i_88e8c194c7de76b5, nullptr, nullptr, { &s_88e8c194c7de76b5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b5568a3ad83e748d = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    141, 116,  62, 216,  58, 138,  86, 181,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46,  97,  99, 113, 117,
    105, 114, 101,  71, 112, 117,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      1,  71,  53, 155,  23,   3, 241, 228,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b5568a3ad83e748d = b_b5568a3ad83e748d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b5568a3ad83e748d[] = {
  &s_e4f103179b354701,
};
static const uint16_t m_b5568a3ad83e748d[] = {0};
static const uint16_t i_b5568a3ad83e748d[] = {0};
const ::capnp::_::RawSchema s_b5568a3ad83e748d = {
  0xb5568a3ad83e748d, b_b5568a3ad83e748d.words, 35, d_b5568a3ad83e748d, m_b5568a3ad83e748d,
  1, 1, i_b5568a3ad83e748d, nullptr, nullptr, { &s_b5568a3ad83e748d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8031a24cacf7ef24 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     36, 239, 247, 172,  76, 162,  49, 128,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46,  97,  99, 113, 117,
    105, 114, 101,  71, 112, 117,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     15, 198,  24, 172, 112,  59,  60, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8031a24cacf7ef24 = b_8031a24cacf7ef24.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8031a24cacf7ef24[] = {
  &s_bc3c3b70ac18c60f,
};
static const uint16_t m_8031a24cacf7ef24[] = {0};
static const uint16_t i_8031a24cacf7ef24[] = {0};
const ::capnp::_::RawSchema s_8031a24cacf7ef24 = {
  0x8031a24cacf7ef24, b_8031a24cacf7ef24.words, 35, d_8031a24cacf7ef24, m_8031a24cacf7ef24,
  1, 1, i_8031a24cacf7ef24, nullptr, nullptr, { &s_8031a24cacf7ef24, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_80a3402bda717aa6 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    166, 122, 113, 218,  43,  64, 163, 128,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 114, 101, 108, 101,
     97, 115, 101,  71, 112, 117,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      1,  71,  53, 155,  23,   3, 241, 228,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_80a3402bda717aa6 = b_80a3402bda717aa6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_80a3402bda717aa6[] = {
  &s_e4f103179b354701,
};
static const uint16_t m_80a3402bda717aa6[] = {0};
static const uint16_t i_80a3402bda717aa6[] = {0};
const ::capnp::_::RawSchema s_80a3402bda717aa6 = {
  0x80a3402bda717aa6, b_80a3402bda717aa6.words, 35, d_80a3402bda717aa6, m_80a3402bda717aa6,
  1, 1, i_80a3402bda717aa6, nullptr, nullptr, { &s_80a3402bda717aa6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_9994ba5ea08baa47 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     71, 170, 139, 160,  94, 186, 148, 153,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 114, 101, 108, 101,
     97, 115, 101,  71, 112, 117,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     15, 198,  24, 172, 112,  59,  60, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9994ba5ea08baa47 = b_9994ba5ea08baa47.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9994ba5ea08baa47[] = {
  &s_bc3c3b70ac18c60f,
};
static const uint16_t m_9994ba5ea08baa47[] = {0};
static const uint16_t i_9994ba5ea08baa47[] = {0};
const ::capnp::_::RawSchema s_9994ba5ea08baa47 = {
  0x9994ba5ea08baa47, b_9994ba5ea08baa47.words, 35, d_9994ba5ea08baa47, m_9994ba5ea08baa47,
  1, 1, i_9994ba5ea08baa47, nullptr, nullptr, { &s_9994ba5ea08baa47, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_ac5ce9d7dbd7dc54 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     84, 220, 215, 219, 215, 233,  92, 172,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 114, 117, 110,  67,
    111, 109, 109,  97, 110, 100,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    166, 216, 164, 233,  53, 121,  79, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ac5ce9d7dbd7dc54 = b_ac5ce9d7dbd7dc54.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ac5ce9d7dbd7dc54[] = {
  &s_b94f7935e9a4d8a6,
};
static const uint16_t m_ac5ce9d7dbd7dc54[] = {0};
static const uint16_t i_ac5ce9d7dbd7dc54[] = {0};
const ::capnp::_::RawSchema s_ac5ce9d7dbd7dc54 = {
  0xac5ce9d7dbd7dc54, b_ac5ce9d7dbd7dc54.words, 35, d_ac5ce9d7dbd7dc54, m_ac5ce9d7dbd7dc54,
  1, 1, i_ac5ce9d7dbd7dc54, nullptr, nullptr, { &s_ac5ce9d7dbd7dc54, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_94cf2d50096076fe = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    254, 118,  96,   9,  80,  45, 207, 148,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  45,  99, 111, 110, 116,
    114, 111, 108,  46,  99,  97, 112, 110,
    112,  58,  83,  99, 104, 101, 100, 117,
    108, 101, 114,  46, 114, 117, 110,  67,
    111, 109, 109,  97, 110, 100,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    244, 150, 187, 153, 245,  50,   8, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_94cf2d50096076fe = b_94cf2d50096076fe.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_94cf2d50096076fe[] = {
  &s_d50832f599bb96f4,
};
static const uint16_t m_94cf2d50096076fe[] = {0};
static const uint16_t i_94cf2d50096076fe[] = {0};
const ::capnp::_::RawSchema s_94cf2d50096076fe = {
  0x94cf2d50096076fe, b_94cf2d50096076fe.words, 36, d_94cf2d50096076fe, m_94cf2d50096076fe,
  1, 1, i_94cf2d50096076fe, nullptr, nullptr, { &s_94cf2d50096076fe, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// GpuList
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuList::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuList::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuList::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuList::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuStatus
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuStatus::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuStatus::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuStatus::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuStatus::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Ack
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Ack::_capnpPrivate::dataWordSize;
constexpr uint16_t Ack::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Ack::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Ack::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RunRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RunRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t RunRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RunRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RunRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RunResponse
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RunResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t RunResponse::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RunResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RunResponse::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Path
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Path::_capnpPrivate::dataWordSize;
constexpr uint16_t Path::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Path::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Path::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Step
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Step::_capnpPrivate::dataWordSize;
constexpr uint16_t Step::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Step::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Step::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Metrics
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Metrics::_capnpPrivate::dataWordSize;
constexpr uint16_t Metrics::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Metrics::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metrics::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Scheduler::RequestPathParams,  ::Scheduler::RequestPathResults>
Scheduler::Client::requestPathRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::RequestPathParams,  ::Scheduler::RequestPathResults>(
      0xef8cb4fe563986d6ull, 0, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::requestPath(RequestPathContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu-control.capnp:Scheduler", "requestPath",
      0xef8cb4fe563986d6ull, 0);
}
::capnp::Request< ::Scheduler::ReportMetricsParams,  ::Scheduler::ReportMetricsResults>
Scheduler::Client::reportMetricsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::ReportMetricsParams,  ::Scheduler::ReportMetricsResults>(
      0xef8cb4fe563986d6ull, 1, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::reportMetrics(ReportMetricsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu-control.capnp:Scheduler", "reportMetrics",
      0xef8cb4fe563986d6ull, 1);
}
::capnp::Request< ::Scheduler::RegisterGpuParams,  ::Scheduler::RegisterGpuResults>
Scheduler::Client::registerGpuRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::RegisterGpuParams,  ::Scheduler::RegisterGpuResults>(
      0xef8cb4fe563986d6ull, 2, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::registerGpu(RegisterGpuContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu-control.capnp:Scheduler", "registerGpu",
      0xef8cb4fe563986d6ull, 2);
}
::capnp::Request< ::Scheduler::ListGpusParams,  ::Scheduler::ListGpusResults>
Scheduler::Client::listGpusRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::ListGpusParams,  ::Scheduler::ListGpusResults>(
      0xef8cb4fe563986d6ull, 3, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::listGpus(ListGpusContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu-control.capnp:Scheduler", "listGpus",
      0xef8cb4fe563986d6ull, 3);
}
::capnp::Request< ::Scheduler::GetGpuStatusParams,  ::Scheduler::GetGpuStatusResults>
Scheduler::Client::getGpuStatusRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::GetGpuStatusParams,  ::Scheduler::GetGpuStatusResults>(
      0xef8cb4fe563986d6ull, 4, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::getGpuStatus(GetGpuStatusContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu-control.capnp:Scheduler", "getGpuStatus",
      0xef8cb4fe563986d6ull, 4);
}
::capnp::Request< ::Scheduler::AcquireGpuParams,  ::Scheduler::AcquireGpuResults>
Scheduler::Client::acquireGpuRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::AcquireGpuParams,  ::Scheduler::AcquireGpuResults>(
      0xef8cb4fe563986d6ull, 5, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::acquireGpu(AcquireGpuContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu-control.capnp:Scheduler", "acquireGpu",
      0xef8cb4fe563986d6ull, 5);
}
::capnp::Request< ::Scheduler::ReleaseGpuParams,  ::Scheduler::ReleaseGpuResults>
Scheduler::Client::releaseGpuRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::ReleaseGpuParams,  ::Scheduler::ReleaseGpuResults>(
      0xef8cb4fe563986d6ull, 6, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::releaseGpu(ReleaseGpuContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu-control.capnp:Scheduler", "releaseGpu",
      0xef8cb4fe563986d6ull, 6);
}
::capnp::Request< ::Scheduler::RunCommandParams,  ::Scheduler::RunCommandResults>
Scheduler::Client::runCommandRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::RunCommandParams,  ::Scheduler::RunCommandResults>(
      0xef8cb4fe563986d6ull, 7, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::runCommand(RunCommandContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu-control.capnp:Scheduler", "runCommand",
      0xef8cb4fe563986d6ull, 7);
}
::capnp::Capability::Server::DispatchCallResult Scheduler::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xef8cb4fe563986d6ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("gpu-control.capnp:Scheduler", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Scheduler::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        requestPath(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::RequestPathParams,  ::Scheduler::RequestPathResults>(context)),
        false,
        false
      };
    case 1:
      return {
        reportMetrics(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::ReportMetricsParams,  ::Scheduler::ReportMetricsResults>(context)),
        false,
        false
      };
    case 2:
      return {
        registerGpu(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::RegisterGpuParams,  ::Scheduler::RegisterGpuResults>(context)),
        false,
        false
      };
    case 3:
      return {
        listGpus(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::ListGpusParams,  ::Scheduler::ListGpusResults>(context)),
        false,
        false
      };
    case 4:
      return {
        getGpuStatus(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::GetGpuStatusParams,  ::Scheduler::GetGpuStatusResults>(context)),
        false,
        false
      };
    case 5:
      return {
        acquireGpu(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::AcquireGpuParams,  ::Scheduler::AcquireGpuResults>(context)),
        false,
        false
      };
    case 6:
      return {
        releaseGpu(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::ReleaseGpuParams,  ::Scheduler::ReleaseGpuResults>(context)),
        false,
        false
      };
    case 7:
      return {
        runCommand(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::RunCommandParams,  ::Scheduler::RunCommandResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "gpu-control.capnp:Scheduler",
          0xef8cb4fe563986d6ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Scheduler
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::RequestPathParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::RequestPathParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::RequestPathParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::RequestPathParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::RequestPathParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::RequestPathResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::RequestPathResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::RequestPathResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::RequestPathResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::RequestPathResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::ReportMetricsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::ReportMetricsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::ReportMetricsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::ReportMetricsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::ReportMetricsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::ReportMetricsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::ReportMetricsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::ReportMetricsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::ReportMetricsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::ReportMetricsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::RegisterGpuParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::RegisterGpuParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::RegisterGpuParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::RegisterGpuParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::RegisterGpuParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::RegisterGpuResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::RegisterGpuResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::RegisterGpuResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::RegisterGpuResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::RegisterGpuResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::ListGpusParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::ListGpusParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::ListGpusParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::ListGpusParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::ListGpusParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::ListGpusResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::ListGpusResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::ListGpusResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::ListGpusResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::ListGpusResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::GetGpuStatusParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::GetGpuStatusParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::GetGpuStatusParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::GetGpuStatusParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::GetGpuStatusParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::GetGpuStatusResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::GetGpuStatusResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::GetGpuStatusResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::GetGpuStatusResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::GetGpuStatusResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::AcquireGpuParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::AcquireGpuParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::AcquireGpuParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::AcquireGpuParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::AcquireGpuParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::AcquireGpuResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::AcquireGpuResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::AcquireGpuResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::AcquireGpuResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::AcquireGpuResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::ReleaseGpuParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::ReleaseGpuParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::ReleaseGpuParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::ReleaseGpuParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::ReleaseGpuParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::ReleaseGpuResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::ReleaseGpuResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::ReleaseGpuResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::ReleaseGpuResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::ReleaseGpuResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::RunCommandParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::RunCommandParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::RunCommandParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::RunCommandParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::RunCommandParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::RunCommandResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::RunCommandResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::RunCommandResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::RunCommandResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::RunCommandResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



