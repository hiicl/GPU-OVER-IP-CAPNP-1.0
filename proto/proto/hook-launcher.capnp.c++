// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: hook-launcher.capnp

#include "hook-launcher.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<67> b_ddb256ee5b6b53b3 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    179,  83, 107,  91, 238,  86, 178, 221,
     20,   0,   0,   0,   1,   0,   1,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    130,   1,   0,   0, 246,   1,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  77, 101, 109,  99,
    112, 121,  80, 108,  97, 110,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
    116,  97, 114, 103, 101, 116,  83, 101,
    114, 118, 101, 114,  73, 112,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,  97, 114, 103, 101, 116,  83, 101,
    114, 118, 101, 114,  90, 109, 113,  80,
    111, 114, 116,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    125,   7, 179, 164, 122,  15,  56, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ddb256ee5b6b53b3 = b_ddb256ee5b6b53b3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ddb256ee5b6b53b3[] = {
  &s_fd380f7aa4b3077d,
};
static const uint16_t m_ddb256ee5b6b53b3[] = {2, 0, 1};
static const uint16_t i_ddb256ee5b6b53b3[] = {0, 1, 2};
const ::capnp::_::RawSchema s_ddb256ee5b6b53b3 = {
  0xddb256ee5b6b53b3, b_ddb256ee5b6b53b3.words, 67, d_ddb256ee5b6b53b3, m_ddb256ee5b6b53b3,
  1, 3, i_ddb256ee5b6b53b3, nullptr, nullptr, { &s_ddb256ee5b6b53b3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<130> b_eb7186a22c3fa0de = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    222, 160,  63,  44, 162, 134, 113, 235,
     20,   0,   0,   0,   1,   0,   4,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    250,   1,   0,   0, 108,   3,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 143,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  78, 111, 100, 101,
     83, 116,  97, 116, 117, 115,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     28,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    184,   0,   0,   0,   3,   0,   1,   0,
    196,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    200,   0,   0,   0,   3,   0,   1,   0,
    212,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    216,   0,   0,   0,   3,   0,   1,   0,
    228,   0,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0, 192,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    224,   0,   0,   0,   3,   0,   1,   0,
    236,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 118,  97, 105, 108,  97,  98, 108,
    101,  77, 101, 109, 111, 114, 121,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  85, 116, 105, 108, 105,
    122,  97, 116, 105, 111, 110,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 116, 119, 111, 114, 107,  76,
     97, 116, 101, 110,  99, 121,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 117, 109,  97,  78, 111, 100, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  67, 111, 117, 110, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 100, 109,  97,  83, 117, 112, 112,
    111, 114, 116,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eb7186a22c3fa0de = b_eb7186a22c3fa0de.words;
#if !CAPNP_LITE
static const uint16_t m_eb7186a22c3fa0de[] = {1, 5, 2, 0, 3, 4, 6};
static const uint16_t i_eb7186a22c3fa0de[] = {0, 1, 2, 3, 4, 5, 6};
const ::capnp::_::RawSchema s_eb7186a22c3fa0de = {
  0xeb7186a22c3fa0de, b_eb7186a22c3fa0de.words, 130, nullptr, m_eb7186a22c3fa0de,
  0, 7, i_eb7186a22c3fa0de, nullptr, nullptr, { &s_eb7186a22c3fa0de, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<84> b_f853fd580170b9de = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    222, 185, 112,   1,  88, 253,  83, 248,
     20,   0,   0,   0,   1,   0,   2,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   3,   0,   0, 159,   4,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  65, 108, 108, 111,
     99,  97, 116, 105, 111, 110,  80, 108,
     97, 110,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,  64,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
    116,  97, 114, 103, 101, 116,  78, 111,
    100, 101,  73, 100,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 109, 111, 114, 121,  84, 121,
    112, 101,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     73,  70,  23, 226, 125, 241, 172, 250,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114,  97, 110, 115, 112, 111, 114,
    116,  84, 121, 112, 101,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     12,  44, 183, 145, 112, 237, 180, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 102, 101, 116,  99, 104,
     72, 105, 110, 116,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f853fd580170b9de = b_f853fd580170b9de.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f853fd580170b9de[] = {
  &s_98b4ed7091b72c0c,
  &s_faacf17de2174649,
};
static const uint16_t m_f853fd580170b9de[] = {1, 3, 0, 2};
static const uint16_t i_f853fd580170b9de[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_f853fd580170b9de = {
  0xf853fd580170b9de, b_f853fd580170b9de.words, 84, d_f853fd580170b9de, m_f853fd580170b9de,
  2, 4, i_f853fd580170b9de, nullptr, nullptr, { &s_f853fd580170b9de, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<27> b_faacf17de2174649 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     73,  70,  23, 226, 125, 241, 172, 250,
     20,   0,   0,   0,   2,   0,   0,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    163,   4,   0,   0, 207,   4,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  77, 101, 109, 111,
    114, 121,  84, 121, 112, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 114,  97, 109,   0,   0,   0,   0,
    104, 111, 115, 116,   0,   0,   0,   0, }
};
::capnp::word const* const bp_faacf17de2174649 = b_faacf17de2174649.words;
#if !CAPNP_LITE
static const uint16_t m_faacf17de2174649[] = {1, 0};
const ::capnp::_::RawSchema s_faacf17de2174649 = {
  0xfaacf17de2174649, b_faacf17de2174649.words, 27, nullptr, m_faacf17de2174649,
  0, 2, nullptr, nullptr, nullptr, { &s_faacf17de2174649, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(MemoryType_faacf17de2174649, faacf17de2174649);
static const ::capnp::_::AlignedData<32> b_98b4ed7091b72c0c = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     12,  44, 183, 145, 112, 237, 180, 152,
     20,   0,   0,   0,   2,   0,   0,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    211,   4,   0,   0,  12,   5,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  84, 114,  97, 110,
    115, 112, 111, 114, 116,  84, 121, 112,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 100, 109,  97,   0,   0,   0,   0,
    117, 100, 112,   0,   0,   0,   0,   0,
    116,  99, 112,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_98b4ed7091b72c0c = b_98b4ed7091b72c0c.words;
#if !CAPNP_LITE
static const uint16_t m_98b4ed7091b72c0c[] = {0, 2, 1};
const ::capnp::_::RawSchema s_98b4ed7091b72c0c = {
  0x98b4ed7091b72c0c, b_98b4ed7091b72c0c.words, 32, nullptr, m_98b4ed7091b72c0c,
  0, 3, nullptr, nullptr, nullptr, { &s_98b4ed7091b72c0c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(TransportType_98b4ed7091b72c0c, 98b4ed7091b72c0c);
static const ::capnp::_::AlignedData<156> b_b5d15336d30e0dd1 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    209,  13,  14, 211,  54,  83, 209, 181,
     20,   0,   0,   0,   3,   0,   0,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   5,   0,   0, 165,  11,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,   7,   3,   0,   0,
     61,   2,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     48,   0,   0,   0,   3,   0,   5,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    148, 109, 138, 178,  81, 208,   0, 160,
     64, 169, 115,  90,  30, 219, 204, 217,
    113,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   1,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     79, 128, 138, 233, 203,  35,  53, 235,
     57, 143, 233,  65, 190, 158,  56, 250,
     93,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   1,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    133, 157, 208, 110, 172, 187, 182, 128,
     32,  11, 244, 162, 201,  34, 101, 231,
     73,   1,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   1,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    244,   8, 218, 103, 137, 115, 252, 190,
     32,  47, 172,  30, 131,  42, 189, 203,
     53,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   1,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    183,  92, 145, 168, 159,  81, 171, 164,
    176, 231, 149, 175, 239, 141, 173, 140,
     33,   1,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    223, 230,   2, 188, 231, 234,  71, 187,
     87,   3, 100, 241,  85, 161, 100, 129,
     17,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     55,  35, 133, 246, 154, 163,   7, 228,
    151, 188,  16, 119, 172, 217,  23, 172,
    253,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    249,   0,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     51, 137, 100,  39, 170, 207,  69, 221,
    125,  50, 144, 231, 152, 188, 142, 192,
    237,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    229,   0,   0,   0,   7,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    136, 190,  63, 231, 201, 140, 152, 173,
     28, 107,  55, 235, 137, 186, 255, 236,
    217,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68, 176, 159, 214, 173,   0,  56, 184,
     54,  89, 237, 165, 161, 251,  94, 188,
    197,   0,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     55,  19, 177,  83, 163, 173, 119, 185,
    158, 127, 174, 199, 165, 213, 211, 242,
    181,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,   7,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
    139, 207, 235, 135, 235, 135,  58, 144,
    203, 142, 218, 154, 215, 136,  61, 212,
    161,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,   7,   0,   0,   0,
    112, 108,  97, 110,  77, 101, 109,  99,
    112, 121,  72, 116, 111,  68,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112, 108,  97, 110,  77, 101, 109,  99,
    112, 121,  68, 116, 111,  72,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  78, 111, 100, 101,  83,
    116,  97, 116, 117, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    112, 114, 101, 102, 101, 116,  99, 104,
     68,  97, 116,  97,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 101,  97, 115, 117, 114, 101,  66,
     97, 110, 100, 119, 105, 100, 116, 104,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 114,  97,  99, 107,  65, 115, 121,
    110,  99,  84,  97, 115, 107,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  77, 101, 109, 111, 114,
    121,  76, 111,  99,  97, 116, 105, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 100, 118, 105, 115, 101,  80, 114,
    101, 102, 101, 116,  99, 104,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,  82,
    100, 109,  97,  80, 108,  97, 110,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,  65,
    108, 108, 111,  99,  97, 116, 105, 111,
    110,  80, 108,  97, 110,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,  70,
    114, 101, 101,  80, 108,  97, 110,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108,  97, 117, 110,  99, 104,  75, 101,
    114, 110, 101, 108,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b5d15336d30e0dd1 = b_b5d15336d30e0dd1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b5d15336d30e0dd1[] = {
  &s_80b6bbac6ed09d85,
  &s_8164a155f1640357,
  &s_8cad8defaf95e7b0,
  &s_903a87eb87ebcf8b,
  &s_a000d051b28a6d94,
  &s_a4ab519fa8915cb7,
  &s_ac17d9ac7710bc97,
  &s_ad988cc9e73fbe88,
  &s_b83800add69fb044,
  &s_b977ada353b11337,
  &s_bb47eae7bc02e6df,
  &s_bc5efba1a5ed5936,
  &s_befc738967da08f4,
  &s_c08ebc98e790327d,
  &s_cbbd2a831eac2f20,
  &s_d43d88d79ada8ecb,
  &s_d9ccdb1e5a73a940,
  &s_dd45cfaa27648933,
  &s_e407a39af6852337,
  &s_e76522c9a2f40b20,
  &s_eb3523cbe98a804f,
  &s_ecffba89eb376b1c,
  &s_f2d3d5a5c7ae7f9e,
  &s_fa389ebe41e98f39,
};
static const uint16_t m_b5d15336d30e0dd1[] = {7, 6, 2, 11, 4, 1, 0, 3, 9, 10, 8, 5};
const ::capnp::_::RawSchema s_b5d15336d30e0dd1 = {
  0xb5d15336d30e0dd1, b_b5d15336d30e0dd1.words, 156, d_b5d15336d30e0dd1, m_b5d15336d30e0dd1,
  24, 12, nullptr, nullptr, nullptr, { &s_b5d15336d30e0dd1, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_a000d051b28a6d94 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    148, 109, 138, 178,  81, 208,   0, 160,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 112, 108,  97, 110,  77, 101, 109,
     99, 112, 121,  72, 116, 111,  68,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    100, 115, 116,  72,  97, 110, 100, 108,
    101,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    170, 101,  54, 224,  37, 103, 115, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a000d051b28a6d94 = b_a000d051b28a6d94.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a000d051b28a6d94[] = {
  &s_a3736725e03665aa,
};
static const uint16_t m_a000d051b28a6d94[] = {0, 1};
static const uint16_t i_a000d051b28a6d94[] = {0, 1};
const ::capnp::_::RawSchema s_a000d051b28a6d94 = {
  0xa000d051b28a6d94, b_a000d051b28a6d94.words, 52, d_a000d051b28a6d94, m_a000d051b28a6d94,
  1, 2, i_a000d051b28a6d94, nullptr, nullptr, { &s_a000d051b28a6d94, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_d9ccdb1e5a73a940 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     64, 169, 115,  90,  30, 219, 204, 217,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 112, 108,  97, 110,  77, 101, 109,
     99, 112, 121,  72, 116, 111,  68,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 108,  97, 110,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    179,  83, 107,  91, 238,  86, 178, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d9ccdb1e5a73a940 = b_d9ccdb1e5a73a940.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d9ccdb1e5a73a940[] = {
  &s_ddb256ee5b6b53b3,
};
static const uint16_t m_d9ccdb1e5a73a940[] = {0};
static const uint16_t i_d9ccdb1e5a73a940[] = {0};
const ::capnp::_::RawSchema s_d9ccdb1e5a73a940 = {
  0xd9ccdb1e5a73a940, b_d9ccdb1e5a73a940.words, 36, d_d9ccdb1e5a73a940, m_d9ccdb1e5a73a940,
  1, 1, i_d9ccdb1e5a73a940, nullptr, nullptr, { &s_d9ccdb1e5a73a940, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_eb3523cbe98a804f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     79, 128, 138, 233, 203,  35,  53, 235,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 112, 108,  97, 110,  77, 101, 109,
     99, 112, 121,  68, 116, 111,  72,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    115, 114,  99,  72,  97, 110, 100, 108,
    101,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    170, 101,  54, 224,  37, 103, 115, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eb3523cbe98a804f = b_eb3523cbe98a804f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_eb3523cbe98a804f[] = {
  &s_a3736725e03665aa,
};
static const uint16_t m_eb3523cbe98a804f[] = {1, 0};
static const uint16_t i_eb3523cbe98a804f[] = {0, 1};
const ::capnp::_::RawSchema s_eb3523cbe98a804f = {
  0xeb3523cbe98a804f, b_eb3523cbe98a804f.words, 52, d_eb3523cbe98a804f, m_eb3523cbe98a804f,
  1, 2, i_eb3523cbe98a804f, nullptr, nullptr, { &s_eb3523cbe98a804f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_fa389ebe41e98f39 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     57, 143, 233,  65, 190, 158,  56, 250,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 112, 108,  97, 110,  77, 101, 109,
     99, 112, 121,  68, 116, 111,  72,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 108,  97, 110,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    179,  83, 107,  91, 238,  86, 178, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fa389ebe41e98f39 = b_fa389ebe41e98f39.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fa389ebe41e98f39[] = {
  &s_ddb256ee5b6b53b3,
};
static const uint16_t m_fa389ebe41e98f39[] = {0};
static const uint16_t i_fa389ebe41e98f39[] = {0};
const ::capnp::_::RawSchema s_fa389ebe41e98f39 = {
  0xfa389ebe41e98f39, b_fa389ebe41e98f39.words, 36, d_fa389ebe41e98f39, m_fa389ebe41e98f39,
  1, 1, i_fa389ebe41e98f39, nullptr, nullptr, { &s_fa389ebe41e98f39, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_80b6bbac6ed09d85 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    133, 157, 208, 110, 172, 187, 182, 128,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 103, 101, 116,  78, 111, 100, 101,
     83, 116,  97, 116, 117, 115,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_80b6bbac6ed09d85 = b_80b6bbac6ed09d85.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_80b6bbac6ed09d85 = {
  0x80b6bbac6ed09d85, b_80b6bbac6ed09d85.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_80b6bbac6ed09d85, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_e76522c9a2f40b20 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     32,  11, 244, 162, 201,  34, 101, 231,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 103, 101, 116,  78, 111, 100, 101,
     83, 116,  97, 116, 117, 115,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 100, 101, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    222, 160,  63,  44, 162, 134, 113, 235,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e76522c9a2f40b20 = b_e76522c9a2f40b20.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e76522c9a2f40b20[] = {
  &s_eb7186a22c3fa0de,
};
static const uint16_t m_e76522c9a2f40b20[] = {0};
static const uint16_t i_e76522c9a2f40b20[] = {0};
const ::capnp::_::RawSchema s_e76522c9a2f40b20 = {
  0xe76522c9a2f40b20, b_e76522c9a2f40b20.words, 40, d_e76522c9a2f40b20, m_e76522c9a2f40b20,
  1, 1, i_e76522c9a2f40b20, nullptr, nullptr, { &s_e76522c9a2f40b20, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_befc738967da08f4 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    244,   8, 218, 103, 137, 115, 252, 190,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 112, 114, 101, 102, 101, 116,  99,
    104,  68,  97, 116,  97,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    170, 101,  54, 224,  37, 103, 115, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_befc738967da08f4 = b_befc738967da08f4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_befc738967da08f4[] = {
  &s_a3736725e03665aa,
};
static const uint16_t m_befc738967da08f4[] = {0};
static const uint16_t i_befc738967da08f4[] = {0};
const ::capnp::_::RawSchema s_befc738967da08f4 = {
  0xbefc738967da08f4, b_befc738967da08f4.words, 36, d_befc738967da08f4, m_befc738967da08f4,
  1, 1, i_befc738967da08f4, nullptr, nullptr, { &s_befc738967da08f4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_cbbd2a831eac2f20 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     32,  47, 172,  30, 131,  42, 189, 203,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 112, 114, 101, 102, 101, 116,  99,
    104,  68,  97, 116,  97,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cbbd2a831eac2f20 = b_cbbd2a831eac2f20.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cbbd2a831eac2f20[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_cbbd2a831eac2f20[] = {0};
static const uint16_t i_cbbd2a831eac2f20[] = {0};
const ::capnp::_::RawSchema s_cbbd2a831eac2f20 = {
  0xcbbd2a831eac2f20, b_cbbd2a831eac2f20.words, 36, d_cbbd2a831eac2f20, m_cbbd2a831eac2f20,
  1, 1, i_cbbd2a831eac2f20, nullptr, nullptr, { &s_cbbd2a831eac2f20, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_a4ab519fa8915cb7 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    183,  92, 145, 168, 159,  81, 171, 164,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 109, 101,  97, 115, 117, 114, 101,
     66,  97, 110, 100, 119, 105, 100, 116,
    104,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    115, 114,  99,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 115, 116,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a4ab519fa8915cb7 = b_a4ab519fa8915cb7.words;
#if !CAPNP_LITE
static const uint16_t m_a4ab519fa8915cb7[] = {1, 0};
static const uint16_t i_a4ab519fa8915cb7[] = {0, 1};
const ::capnp::_::RawSchema s_a4ab519fa8915cb7 = {
  0xa4ab519fa8915cb7, b_a4ab519fa8915cb7.words, 52, nullptr, m_a4ab519fa8915cb7,
  0, 2, i_a4ab519fa8915cb7, nullptr, nullptr, { &s_a4ab519fa8915cb7, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_8cad8defaf95e7b0 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    176, 231, 149, 175, 239, 141, 173, 140,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 109, 101,  97, 115, 117, 114, 101,
     66,  97, 110, 100, 119, 105, 100, 116,
    104,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    147, 180,   4,  87, 226, 191,   6, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8cad8defaf95e7b0 = b_8cad8defaf95e7b0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8cad8defaf95e7b0[] = {
  &s_8e06bfe25704b493,
};
static const uint16_t m_8cad8defaf95e7b0[] = {0};
static const uint16_t i_8cad8defaf95e7b0[] = {0};
const ::capnp::_::RawSchema s_8cad8defaf95e7b0 = {
  0x8cad8defaf95e7b0, b_8cad8defaf95e7b0.words, 37, d_8cad8defaf95e7b0, m_8cad8defaf95e7b0,
  1, 1, i_8cad8defaf95e7b0, nullptr, nullptr, { &s_8cad8defaf95e7b0, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_bb47eae7bc02e6df = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    223, 230,   2, 188, 231, 234,  71, 187,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 116, 114,  97,  99, 107,  65, 115,
    121, 110,  99,  84,  97, 115, 107,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116,  97, 115, 107,  73, 100,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb47eae7bc02e6df = b_bb47eae7bc02e6df.words;
#if !CAPNP_LITE
static const uint16_t m_bb47eae7bc02e6df[] = {0};
static const uint16_t i_bb47eae7bc02e6df[] = {0};
const ::capnp::_::RawSchema s_bb47eae7bc02e6df = {
  0xbb47eae7bc02e6df, b_bb47eae7bc02e6df.words, 36, nullptr, m_bb47eae7bc02e6df,
  0, 1, i_bb47eae7bc02e6df, nullptr, nullptr, { &s_bb47eae7bc02e6df, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_8164a155f1640357 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     87,   3, 100, 241,  85, 161, 100, 129,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 116, 114,  97,  99, 107,  65, 115,
    121, 110,  99,  84,  97, 115, 107,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 116,  97, 116, 117, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    173,  69, 197, 170,  93, 167, 103, 144,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8164a155f1640357 = b_8164a155f1640357.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8164a155f1640357[] = {
  &s_9067a75daac545ad,
};
static const uint16_t m_8164a155f1640357[] = {0};
static const uint16_t i_8164a155f1640357[] = {0};
const ::capnp::_::RawSchema s_8164a155f1640357 = {
  0x8164a155f1640357, b_8164a155f1640357.words, 36, d_8164a155f1640357, m_8164a155f1640357,
  1, 1, i_8164a155f1640357, nullptr, nullptr, { &s_8164a155f1640357, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_e407a39af6852337 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     55,  35, 133, 246, 154, 163,   7, 228,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 103, 101, 116,  77, 101, 109, 111,
    114, 121,  76, 111,  99,  97, 116, 105,
    111, 110,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102,  97, 107, 101,  80, 116, 114,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e407a39af6852337 = b_e407a39af6852337.words;
#if !CAPNP_LITE
static const uint16_t m_e407a39af6852337[] = {0};
static const uint16_t i_e407a39af6852337[] = {0};
const ::capnp::_::RawSchema s_e407a39af6852337 = {
  0xe407a39af6852337, b_e407a39af6852337.words, 37, nullptr, m_e407a39af6852337,
  0, 1, i_e407a39af6852337, nullptr, nullptr, { &s_e407a39af6852337, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_ac17d9ac7710bc97 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    151, 188,  16, 119, 172, 217,  23, 172,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 103, 101, 116,  77, 101, 109, 111,
    114, 121,  76, 111,  99,  97, 116, 105,
    111, 110,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    108, 111,  99,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     46, 170, 208, 254, 129, 211,  18, 229,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ac17d9ac7710bc97 = b_ac17d9ac7710bc97.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ac17d9ac7710bc97[] = {
  &s_e512d381fed0aa2e,
};
static const uint16_t m_ac17d9ac7710bc97[] = {0};
static const uint16_t i_ac17d9ac7710bc97[] = {0};
const ::capnp::_::RawSchema s_ac17d9ac7710bc97 = {
  0xac17d9ac7710bc97, b_ac17d9ac7710bc97.words, 38, d_ac17d9ac7710bc97, m_ac17d9ac7710bc97,
  1, 1, i_ac17d9ac7710bc97, nullptr, nullptr, { &s_ac17d9ac7710bc97, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_dd45cfaa27648933 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     51, 137, 100,  39, 170, 207,  69, 221,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46,  97, 100, 118, 105, 115, 101,  80,
    114, 101, 102, 101, 116,  99, 104,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102,  97, 107, 101,  80, 116, 114,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dd45cfaa27648933 = b_dd45cfaa27648933.words;
#if !CAPNP_LITE
static const uint16_t m_dd45cfaa27648933[] = {0};
static const uint16_t i_dd45cfaa27648933[] = {0};
const ::capnp::_::RawSchema s_dd45cfaa27648933 = {
  0xdd45cfaa27648933, b_dd45cfaa27648933.words, 36, nullptr, m_dd45cfaa27648933,
  0, 1, i_dd45cfaa27648933, nullptr, nullptr, { &s_dd45cfaa27648933, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_c08ebc98e790327d = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    125,  50, 144, 231, 152, 188, 142, 192,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46,  97, 100, 118, 105, 115, 101,  80,
    114, 101, 102, 101, 116,  99, 104,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c08ebc98e790327d = b_c08ebc98e790327d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c08ebc98e790327d[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_c08ebc98e790327d[] = {0};
static const uint16_t i_c08ebc98e790327d[] = {0};
const ::capnp::_::RawSchema s_c08ebc98e790327d = {
  0xc08ebc98e790327d, b_c08ebc98e790327d.words, 36, d_c08ebc98e790327d, m_c08ebc98e790327d,
  1, 1, i_c08ebc98e790327d, nullptr, nullptr, { &s_c08ebc98e790327d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_ad988cc9e73fbe88 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    136, 190,  63, 231, 201, 140, 152, 173,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 114, 101, 113, 117, 101, 115, 116,
     82, 100, 109,  97,  80, 108,  97, 110,
     36,  80,  97, 114,  97, 109, 115,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
    115, 114,  99,  72,  97, 110, 100, 108,
    101,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    170, 101,  54, 224,  37, 103, 115, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 115, 116,  72,  97, 110, 100, 108,
    101,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    170, 101,  54, 224,  37, 103, 115, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ad988cc9e73fbe88 = b_ad988cc9e73fbe88.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ad988cc9e73fbe88[] = {
  &s_a3736725e03665aa,
};
static const uint16_t m_ad988cc9e73fbe88[] = {1, 2, 0};
static const uint16_t i_ad988cc9e73fbe88[] = {0, 1, 2};
const ::capnp::_::RawSchema s_ad988cc9e73fbe88 = {
  0xad988cc9e73fbe88, b_ad988cc9e73fbe88.words, 68, d_ad988cc9e73fbe88, m_ad988cc9e73fbe88,
  1, 3, i_ad988cc9e73fbe88, nullptr, nullptr, { &s_ad988cc9e73fbe88, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_ecffba89eb376b1c = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     28, 107,  55, 235, 137, 186, 255, 236,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 114, 101, 113, 117, 101, 115, 116,
     82, 100, 109,  97,  80, 108,  97, 110,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 108,  97, 110,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    182, 179, 254, 154, 198, 102, 148, 233,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ecffba89eb376b1c = b_ecffba89eb376b1c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ecffba89eb376b1c[] = {
  &s_e99466c69afeb3b6,
};
static const uint16_t m_ecffba89eb376b1c[] = {0};
static const uint16_t i_ecffba89eb376b1c[] = {0};
const ::capnp::_::RawSchema s_ecffba89eb376b1c = {
  0xecffba89eb376b1c, b_ecffba89eb376b1c.words, 37, d_ecffba89eb376b1c, m_ecffba89eb376b1c,
  1, 1, i_ecffba89eb376b1c, nullptr, nullptr, { &s_ecffba89eb376b1c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_b83800add69fb044 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     68, 176, 159, 214, 173,   0,  56, 184,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 114, 101, 113, 117, 101, 115, 116,
     65, 108, 108, 111,  99,  97, 116, 105,
    111, 110,  80, 108,  97, 110,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b83800add69fb044 = b_b83800add69fb044.words;
#if !CAPNP_LITE
static const uint16_t m_b83800add69fb044[] = {0};
static const uint16_t i_b83800add69fb044[] = {0};
const ::capnp::_::RawSchema s_b83800add69fb044 = {
  0xb83800add69fb044, b_b83800add69fb044.words, 37, nullptr, m_b83800add69fb044,
  0, 1, i_b83800add69fb044, nullptr, nullptr, { &s_b83800add69fb044, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_bc5efba1a5ed5936 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     54,  89, 237, 165, 161, 251,  94, 188,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 114, 101, 113, 117, 101, 115, 116,
     65, 108, 108, 111,  99,  97, 116, 105,
    111, 110,  80, 108,  97, 110,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 108,  97, 110,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    222, 185, 112,   1,  88, 253,  83, 248,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc5efba1a5ed5936 = b_bc5efba1a5ed5936.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bc5efba1a5ed5936[] = {
  &s_f853fd580170b9de,
};
static const uint16_t m_bc5efba1a5ed5936[] = {0};
static const uint16_t i_bc5efba1a5ed5936[] = {0};
const ::capnp::_::RawSchema s_bc5efba1a5ed5936 = {
  0xbc5efba1a5ed5936, b_bc5efba1a5ed5936.words, 37, d_bc5efba1a5ed5936, m_bc5efba1a5ed5936,
  1, 1, i_bc5efba1a5ed5936, nullptr, nullptr, { &s_bc5efba1a5ed5936, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_b977ada353b11337 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     55,  19, 177,  83, 163, 173, 119, 185,
     33,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 114, 101, 113, 117, 101, 115, 116,
     70, 114, 101, 101,  80, 108,  97, 110,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102,  97, 107, 101,  80, 116, 114,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b977ada353b11337 = b_b977ada353b11337.words;
#if !CAPNP_LITE
static const uint16_t m_b977ada353b11337[] = {0};
static const uint16_t i_b977ada353b11337[] = {0};
const ::capnp::_::RawSchema s_b977ada353b11337 = {
  0xb977ada353b11337, b_b977ada353b11337.words, 36, nullptr, m_b977ada353b11337,
  0, 1, i_b977ada353b11337, nullptr, nullptr, { &s_b977ada353b11337, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_f2d3d5a5c7ae7f9e = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    158, 127, 174, 199, 165, 213, 211, 242,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 114, 101, 113, 117, 101, 115, 116,
     70, 114, 101, 101,  80, 108,  97, 110,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2d3d5a5c7ae7f9e = b_f2d3d5a5c7ae7f9e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f2d3d5a5c7ae7f9e[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_f2d3d5a5c7ae7f9e[] = {0};
static const uint16_t i_f2d3d5a5c7ae7f9e[] = {0};
const ::capnp::_::RawSchema s_f2d3d5a5c7ae7f9e = {
  0xf2d3d5a5c7ae7f9e, b_f2d3d5a5c7ae7f9e.words, 37, d_f2d3d5a5c7ae7f9e, m_f2d3d5a5c7ae7f9e,
  1, 1, i_f2d3d5a5c7ae7f9e, nullptr, nullptr, { &s_f2d3d5a5c7ae7f9e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<163> b_903a87eb87ebcf8b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    139, 207, 235, 135, 235, 135,  58, 144,
     33,   0,   0,   0,   1,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 255,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 108,  97, 117, 110,  99, 104,  75,
    101, 114, 110, 101, 108,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    232,   0,   0,   0,   3,   0,   1,   0,
    244,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    240,   0,   0,   0,   3,   0,   1,   0,
    252,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    249,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    248,   0,   0,   0,   3,   0,   1,   0,
      4,   1,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   1,   0,   0,   3,   0,   1,   0,
     12,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   1,   0,   0,   3,   0,   1,   0,
     20,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   1,   0,   0,   3,   0,   1,   0,
     28,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   1,   0,   0,   3,   0,   1,   0,
     36,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   1,   0,   0,   3,   0,   1,   0,
     44,   1,   0,   0,   2,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   1,   0,   0,   3,   0,   1,   0,
     48,   1,   0,   0,   2,   0,   1,   0,
    102, 117, 110,  99,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  68, 105, 109,  88,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  68, 105, 109,  89,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  68, 105, 109,  90,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  68, 105, 109,
     88,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  68, 105, 109,
     89,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108, 111,  99, 107,  68, 105, 109,
     90,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 104,  97, 114, 101, 100,  77, 101,
    109,  66, 121, 116, 101, 115,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_903a87eb87ebcf8b = b_903a87eb87ebcf8b.words;
#if !CAPNP_LITE
static const uint16_t m_903a87eb87ebcf8b[] = {4, 5, 6, 0, 1, 2, 3, 8, 7};
static const uint16_t i_903a87eb87ebcf8b[] = {0, 1, 2, 3, 4, 5, 6, 7, 8};
const ::capnp::_::RawSchema s_903a87eb87ebcf8b = {
  0x903a87eb87ebcf8b, b_903a87eb87ebcf8b.words, 163, nullptr, m_903a87eb87ebcf8b,
  0, 9, i_903a87eb87ebcf8b, nullptr, nullptr, { &s_903a87eb87ebcf8b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_d43d88d79ada8ecb = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    203, 142, 218, 154, 215, 136,  61, 212,
     33,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  72, 111, 111, 107,
     76,  97, 117, 110,  99, 104, 101, 114,
     46, 108,  97, 117, 110,  99, 104,  75,
    101, 114, 110, 101, 108,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d43d88d79ada8ecb = b_d43d88d79ada8ecb.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d43d88d79ada8ecb[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_d43d88d79ada8ecb[] = {0};
static const uint16_t i_d43d88d79ada8ecb[] = {0};
const ::capnp::_::RawSchema s_d43d88d79ada8ecb = {
  0xd43d88d79ada8ecb, b_d43d88d79ada8ecb.words, 36, d_d43d88d79ada8ecb, m_d43d88d79ada8ecb,
  1, 1, i_d43d88d79ada8ecb, nullptr, nullptr, { &s_d43d88d79ada8ecb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_8e06bfe25704b493 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    147, 180,   4,  87, 226, 191,   6, 142,
     20,   0,   0,   0,   1,   0,   1,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    203,  11,   0,   0,  70,  12,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  66,  97, 110, 100,
    119, 105, 100, 116, 104,  82, 101, 115,
    117, 108, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    116, 104, 114, 111, 117, 103, 104, 112,
    117, 116,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,  97, 116, 101, 110,  99, 121,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8e06bfe25704b493 = b_8e06bfe25704b493.words;
#if !CAPNP_LITE
static const uint16_t m_8e06bfe25704b493[] = {1, 0};
static const uint16_t i_8e06bfe25704b493[] = {0, 1};
const ::capnp::_::RawSchema s_8e06bfe25704b493 = {
  0x8e06bfe25704b493, b_8e06bfe25704b493.words, 51, nullptr, m_8e06bfe25704b493,
  0, 2, i_8e06bfe25704b493, nullptr, nullptr, { &s_8e06bfe25704b493, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_9067a75daac545ad = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    173,  69, 197, 170,  93, 167, 103, 144,
     20,   0,   0,   0,   1,   0,   1,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     74,  12,   0,   0, 209,  12,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  84,  97, 115, 107,
     83, 116,  97, 116, 117, 115,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 111, 103, 114, 101, 115, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 115, 116, 105, 109,  97, 116, 101,
    100,  84, 105, 109, 101,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9067a75daac545ad = b_9067a75daac545ad.words;
#if !CAPNP_LITE
static const uint16_t m_9067a75daac545ad[] = {1, 0};
static const uint16_t i_9067a75daac545ad[] = {0, 1};
const ::capnp::_::RawSchema s_9067a75daac545ad = {
  0x9067a75daac545ad, b_9067a75daac545ad.words, 51, nullptr, m_9067a75daac545ad,
  0, 2, i_9067a75daac545ad, nullptr, nullptr, { &s_9067a75daac545ad, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_e512d381fed0aa2e = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     46, 170, 208, 254, 129, 211,  18, 229,
     20,   0,   0,   0,   1,   0,   1,   0,
    113,  94, 165, 177, 235, 173, 187, 218,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,  13,   0,   0, 151,  13,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 111, 107,  45, 108,  97, 117,
    110,  99, 104, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  78, 111, 100, 101,
     73, 110, 102, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 100, 101,  73, 100,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 109, 111, 114, 121,  84, 121,
    112, 101,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    125,   7, 179, 164, 122,  15,  56, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e512d381fed0aa2e = b_e512d381fed0aa2e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e512d381fed0aa2e[] = {
  &s_fd380f7aa4b3077d,
};
static const uint16_t m_e512d381fed0aa2e[] = {2, 1, 0};
static const uint16_t i_e512d381fed0aa2e[] = {0, 1, 2};
const ::capnp::_::RawSchema s_e512d381fed0aa2e = {
  0xe512d381fed0aa2e, b_e512d381fed0aa2e.words, 65, d_e512d381fed0aa2e, m_e512d381fed0aa2e,
  1, 3, i_e512d381fed0aa2e, nullptr, nullptr, { &s_e512d381fed0aa2e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// MemcpyPlan
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MemcpyPlan::_capnpPrivate::dataWordSize;
constexpr uint16_t MemcpyPlan::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MemcpyPlan::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MemcpyPlan::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// NodeStatus
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t NodeStatus::_capnpPrivate::dataWordSize;
constexpr uint16_t NodeStatus::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind NodeStatus::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* NodeStatus::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// AllocationPlan
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t AllocationPlan::_capnpPrivate::dataWordSize;
constexpr uint16_t AllocationPlan::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind AllocationPlan::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AllocationPlan::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::HookLauncher::PlanMemcpyHtoDParams,  ::HookLauncher::PlanMemcpyHtoDResults>
HookLauncher::Client::planMemcpyHtoDRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::PlanMemcpyHtoDParams,  ::HookLauncher::PlanMemcpyHtoDResults>(
      0xb5d15336d30e0dd1ull, 0, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::planMemcpyHtoD(PlanMemcpyHtoDContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "planMemcpyHtoD",
      0xb5d15336d30e0dd1ull, 0);
}
::capnp::Request< ::HookLauncher::PlanMemcpyDtoHParams,  ::HookLauncher::PlanMemcpyDtoHResults>
HookLauncher::Client::planMemcpyDtoHRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::PlanMemcpyDtoHParams,  ::HookLauncher::PlanMemcpyDtoHResults>(
      0xb5d15336d30e0dd1ull, 1, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::planMemcpyDtoH(PlanMemcpyDtoHContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "planMemcpyDtoH",
      0xb5d15336d30e0dd1ull, 1);
}
::capnp::Request< ::HookLauncher::GetNodeStatusParams,  ::HookLauncher::GetNodeStatusResults>
HookLauncher::Client::getNodeStatusRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::GetNodeStatusParams,  ::HookLauncher::GetNodeStatusResults>(
      0xb5d15336d30e0dd1ull, 2, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::getNodeStatus(GetNodeStatusContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "getNodeStatus",
      0xb5d15336d30e0dd1ull, 2);
}
::capnp::Request< ::HookLauncher::PrefetchDataParams,  ::HookLauncher::PrefetchDataResults>
HookLauncher::Client::prefetchDataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::PrefetchDataParams,  ::HookLauncher::PrefetchDataResults>(
      0xb5d15336d30e0dd1ull, 3, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::prefetchData(PrefetchDataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "prefetchData",
      0xb5d15336d30e0dd1ull, 3);
}
::capnp::Request< ::HookLauncher::MeasureBandwidthParams,  ::HookLauncher::MeasureBandwidthResults>
HookLauncher::Client::measureBandwidthRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::MeasureBandwidthParams,  ::HookLauncher::MeasureBandwidthResults>(
      0xb5d15336d30e0dd1ull, 4, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::measureBandwidth(MeasureBandwidthContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "measureBandwidth",
      0xb5d15336d30e0dd1ull, 4);
}
::capnp::Request< ::HookLauncher::TrackAsyncTaskParams,  ::HookLauncher::TrackAsyncTaskResults>
HookLauncher::Client::trackAsyncTaskRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::TrackAsyncTaskParams,  ::HookLauncher::TrackAsyncTaskResults>(
      0xb5d15336d30e0dd1ull, 5, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::trackAsyncTask(TrackAsyncTaskContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "trackAsyncTask",
      0xb5d15336d30e0dd1ull, 5);
}
::capnp::Request< ::HookLauncher::GetMemoryLocationParams,  ::HookLauncher::GetMemoryLocationResults>
HookLauncher::Client::getMemoryLocationRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::GetMemoryLocationParams,  ::HookLauncher::GetMemoryLocationResults>(
      0xb5d15336d30e0dd1ull, 6, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::getMemoryLocation(GetMemoryLocationContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "getMemoryLocation",
      0xb5d15336d30e0dd1ull, 6);
}
::capnp::Request< ::HookLauncher::AdvisePrefetchParams,  ::HookLauncher::AdvisePrefetchResults>
HookLauncher::Client::advisePrefetchRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::AdvisePrefetchParams,  ::HookLauncher::AdvisePrefetchResults>(
      0xb5d15336d30e0dd1ull, 7, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::advisePrefetch(AdvisePrefetchContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "advisePrefetch",
      0xb5d15336d30e0dd1ull, 7);
}
::capnp::Request< ::HookLauncher::RequestRdmaPlanParams,  ::HookLauncher::RequestRdmaPlanResults>
HookLauncher::Client::requestRdmaPlanRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::RequestRdmaPlanParams,  ::HookLauncher::RequestRdmaPlanResults>(
      0xb5d15336d30e0dd1ull, 8, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::requestRdmaPlan(RequestRdmaPlanContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "requestRdmaPlan",
      0xb5d15336d30e0dd1ull, 8);
}
::capnp::Request< ::HookLauncher::RequestAllocationPlanParams,  ::HookLauncher::RequestAllocationPlanResults>
HookLauncher::Client::requestAllocationPlanRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::RequestAllocationPlanParams,  ::HookLauncher::RequestAllocationPlanResults>(
      0xb5d15336d30e0dd1ull, 9, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::requestAllocationPlan(RequestAllocationPlanContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "requestAllocationPlan",
      0xb5d15336d30e0dd1ull, 9);
}
::capnp::Request< ::HookLauncher::RequestFreePlanParams,  ::HookLauncher::RequestFreePlanResults>
HookLauncher::Client::requestFreePlanRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::RequestFreePlanParams,  ::HookLauncher::RequestFreePlanResults>(
      0xb5d15336d30e0dd1ull, 10, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::requestFreePlan(RequestFreePlanContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "requestFreePlan",
      0xb5d15336d30e0dd1ull, 10);
}
::capnp::Request< ::HookLauncher::LaunchKernelParams,  ::HookLauncher::LaunchKernelResults>
HookLauncher::Client::launchKernelRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HookLauncher::LaunchKernelParams,  ::HookLauncher::LaunchKernelResults>(
      0xb5d15336d30e0dd1ull, 11, sizeHint, {true});
}
::kj::Promise<void> HookLauncher::Server::launchKernel(LaunchKernelContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hook-launcher.capnp:HookLauncher", "launchKernel",
      0xb5d15336d30e0dd1ull, 11);
}
::capnp::Capability::Server::DispatchCallResult HookLauncher::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb5d15336d30e0dd1ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("hook-launcher.capnp:HookLauncher", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult HookLauncher::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        planMemcpyHtoD(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::PlanMemcpyHtoDParams,  ::HookLauncher::PlanMemcpyHtoDResults>(context)),
        false,
        false
      };
    case 1:
      return {
        planMemcpyDtoH(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::PlanMemcpyDtoHParams,  ::HookLauncher::PlanMemcpyDtoHResults>(context)),
        false,
        false
      };
    case 2:
      return {
        getNodeStatus(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::GetNodeStatusParams,  ::HookLauncher::GetNodeStatusResults>(context)),
        false,
        false
      };
    case 3:
      return {
        prefetchData(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::PrefetchDataParams,  ::HookLauncher::PrefetchDataResults>(context)),
        false,
        false
      };
    case 4:
      return {
        measureBandwidth(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::MeasureBandwidthParams,  ::HookLauncher::MeasureBandwidthResults>(context)),
        false,
        false
      };
    case 5:
      return {
        trackAsyncTask(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::TrackAsyncTaskParams,  ::HookLauncher::TrackAsyncTaskResults>(context)),
        false,
        false
      };
    case 6:
      return {
        getMemoryLocation(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::GetMemoryLocationParams,  ::HookLauncher::GetMemoryLocationResults>(context)),
        false,
        false
      };
    case 7:
      return {
        advisePrefetch(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::AdvisePrefetchParams,  ::HookLauncher::AdvisePrefetchResults>(context)),
        false,
        false
      };
    case 8:
      return {
        requestRdmaPlan(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::RequestRdmaPlanParams,  ::HookLauncher::RequestRdmaPlanResults>(context)),
        false,
        false
      };
    case 9:
      return {
        requestAllocationPlan(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::RequestAllocationPlanParams,  ::HookLauncher::RequestAllocationPlanResults>(context)),
        false,
        false
      };
    case 10:
      return {
        requestFreePlan(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::RequestFreePlanParams,  ::HookLauncher::RequestFreePlanResults>(context)),
        false,
        false
      };
    case 11:
      return {
        launchKernel(::capnp::Capability::Server::internalGetTypedContext<
             ::HookLauncher::LaunchKernelParams,  ::HookLauncher::LaunchKernelResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "hook-launcher.capnp:HookLauncher",
          0xb5d15336d30e0dd1ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// HookLauncher
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::PlanMemcpyHtoDParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::PlanMemcpyHtoDParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::PlanMemcpyHtoDParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::PlanMemcpyHtoDParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::PlanMemcpyHtoDParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::PlanMemcpyHtoDResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::PlanMemcpyHtoDResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::PlanMemcpyHtoDResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::PlanMemcpyHtoDResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::PlanMemcpyHtoDResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::PlanMemcpyDtoHParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::PlanMemcpyDtoHParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::PlanMemcpyDtoHParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::PlanMemcpyDtoHParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::PlanMemcpyDtoHParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::PlanMemcpyDtoHResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::PlanMemcpyDtoHResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::PlanMemcpyDtoHResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::PlanMemcpyDtoHResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::PlanMemcpyDtoHResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::GetNodeStatusParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::GetNodeStatusParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::GetNodeStatusParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::GetNodeStatusParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::GetNodeStatusParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::GetNodeStatusResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::GetNodeStatusResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::GetNodeStatusResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::GetNodeStatusResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::GetNodeStatusResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::PrefetchDataParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::PrefetchDataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::PrefetchDataParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::PrefetchDataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::PrefetchDataParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::PrefetchDataResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::PrefetchDataResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::PrefetchDataResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::PrefetchDataResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::PrefetchDataResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::MeasureBandwidthParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::MeasureBandwidthParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::MeasureBandwidthParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::MeasureBandwidthParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::MeasureBandwidthParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::MeasureBandwidthResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::MeasureBandwidthResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::MeasureBandwidthResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::MeasureBandwidthResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::MeasureBandwidthResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::TrackAsyncTaskParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::TrackAsyncTaskParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::TrackAsyncTaskParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::TrackAsyncTaskParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::TrackAsyncTaskParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::TrackAsyncTaskResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::TrackAsyncTaskResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::TrackAsyncTaskResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::TrackAsyncTaskResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::TrackAsyncTaskResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::GetMemoryLocationParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::GetMemoryLocationParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::GetMemoryLocationParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::GetMemoryLocationParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::GetMemoryLocationParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::GetMemoryLocationResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::GetMemoryLocationResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::GetMemoryLocationResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::GetMemoryLocationResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::GetMemoryLocationResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::AdvisePrefetchParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::AdvisePrefetchParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::AdvisePrefetchParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::AdvisePrefetchParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::AdvisePrefetchParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::AdvisePrefetchResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::AdvisePrefetchResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::AdvisePrefetchResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::AdvisePrefetchResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::AdvisePrefetchResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::RequestRdmaPlanParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::RequestRdmaPlanParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::RequestRdmaPlanParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::RequestRdmaPlanParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::RequestRdmaPlanParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::RequestRdmaPlanResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::RequestRdmaPlanResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::RequestRdmaPlanResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::RequestRdmaPlanResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::RequestRdmaPlanResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::RequestAllocationPlanParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::RequestAllocationPlanParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::RequestAllocationPlanParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::RequestAllocationPlanParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::RequestAllocationPlanParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::RequestAllocationPlanResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::RequestAllocationPlanResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::RequestAllocationPlanResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::RequestAllocationPlanResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::RequestAllocationPlanResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::RequestFreePlanParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::RequestFreePlanParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::RequestFreePlanParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::RequestFreePlanParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::RequestFreePlanParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::RequestFreePlanResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::RequestFreePlanResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::RequestFreePlanResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::RequestFreePlanResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::RequestFreePlanResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::LaunchKernelParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::LaunchKernelParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::LaunchKernelParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::LaunchKernelParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::LaunchKernelParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// HookLauncher::LaunchKernelResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t HookLauncher::LaunchKernelResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HookLauncher::LaunchKernelResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind HookLauncher::LaunchKernelResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HookLauncher::LaunchKernelResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BandwidthResult
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BandwidthResult::_capnpPrivate::dataWordSize;
constexpr uint16_t BandwidthResult::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BandwidthResult::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BandwidthResult::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// TaskStatus
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t TaskStatus::_capnpPrivate::dataWordSize;
constexpr uint16_t TaskStatus::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind TaskStatus::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TaskStatus::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// NodeInfo
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t NodeInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t NodeInfo::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind NodeInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* NodeInfo::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



