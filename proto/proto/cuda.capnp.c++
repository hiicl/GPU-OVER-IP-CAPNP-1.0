// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: cuda.capnp

#include "cuda.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<79> b_aa64c42860eecf63 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     99, 207, 238,  96,  40, 196, 100, 170,
     11,   0,   0,   0,   1,   0,   2,   0,
     68,  68,  34,  34, 204, 204, 187, 187,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     90,   1,   0,   0, 249,   1,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 109,  99, 112,
    121,  80,  97, 114,  97, 109, 115,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
    115, 114,  99,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    170, 101,  54, 224,  37, 103, 115, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 115, 116,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    170, 101,  54, 224,  37, 103, 115, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 114, 101,  99, 116, 105, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    129, 234, 142, 248,   4,  54, 187, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aa64c42860eecf63 = b_aa64c42860eecf63.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_aa64c42860eecf63[] = {
  &s_a3736725e03665aa,
  &s_c3bb3604f88eea81,
};
static const uint16_t m_aa64c42860eecf63[] = {3, 1, 2, 0};
static const uint16_t i_aa64c42860eecf63[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_aa64c42860eecf63 = {
  0xaa64c42860eecf63, b_aa64c42860eecf63.words, 79, d_aa64c42860eecf63, m_aa64c42860eecf63,
  2, 4, i_aa64c42860eecf63, nullptr, nullptr, { &s_aa64c42860eecf63, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ddb50ac56f50ec53 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     83, 236,  80, 111, 197,  10, 181, 221,
     11,   0,   0,   0,   1,   0,   1,   0,
     68,  68,  34,  34, 204, 204, 187, 187,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   1,   0,   0,  52,   2,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  83, 116, 114, 101,  97,
    109,  72,  97, 110, 100, 108, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ddb50ac56f50ec53 = b_ddb50ac56f50ec53.words;
#if !CAPNP_LITE
static const uint16_t m_ddb50ac56f50ec53[] = {0};
static const uint16_t i_ddb50ac56f50ec53[] = {0};
const ::capnp::_::RawSchema s_ddb50ac56f50ec53 = {
  0xddb50ac56f50ec53, b_ddb50ac56f50ec53.words, 33, nullptr, m_ddb50ac56f50ec53,
  0, 1, i_ddb50ac56f50ec53, nullptr, nullptr, { &s_ddb50ac56f50ec53, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9de7a50f41d4cbd0 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    208, 203, 212,  65,  15, 165, 231, 157,
     11,   0,   0,   0,   1,   0,   1,   0,
     68,  68,  34,  34, 204, 204, 187, 187,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   2,   0,   0, 109,   2,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  83, 116, 114, 101,  97,
    109,  67, 114, 101,  97, 116, 101,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102, 108,  97, 103, 115,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9de7a50f41d4cbd0 = b_9de7a50f41d4cbd0.words;
#if !CAPNP_LITE
static const uint16_t m_9de7a50f41d4cbd0[] = {0};
static const uint16_t i_9de7a50f41d4cbd0[] = {0};
const ::capnp::_::RawSchema s_9de7a50f41d4cbd0 = {
  0x9de7a50f41d4cbd0, b_9de7a50f41d4cbd0.words, 34, nullptr, m_9de7a50f41d4cbd0,
  0, 1, i_9de7a50f41d4cbd0, nullptr, nullptr, { &s_9de7a50f41d4cbd0, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_92bc15fb0d1fcb65 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    101, 203,  31,  13, 251,  21, 188, 146,
     11,   0,   0,   0,   1,   0,   1,   0,
     68,  68,  34,  34, 204, 204, 187, 187,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   2,   0,   0, 167,   2,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  69, 118, 101, 110, 116,
     72,  97, 110, 100, 108, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_92bc15fb0d1fcb65 = b_92bc15fb0d1fcb65.words;
#if !CAPNP_LITE
static const uint16_t m_92bc15fb0d1fcb65[] = {0};
static const uint16_t i_92bc15fb0d1fcb65[] = {0};
const ::capnp::_::RawSchema s_92bc15fb0d1fcb65 = {
  0x92bc15fb0d1fcb65, b_92bc15fb0d1fcb65.words, 33, nullptr, m_92bc15fb0d1fcb65,
  0, 1, i_92bc15fb0d1fcb65, nullptr, nullptr, { &s_92bc15fb0d1fcb65, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_a0142208ca8277e0 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    224, 119, 130, 202,   8,  34,  20, 160,
     11,   0,   0,   0,   1,   0,   1,   0,
     68,  68,  34,  34, 204, 204, 187, 187,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    171,   2,   0,   0, 217,   2,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  69, 118, 101, 110, 116,
     80,  97, 114,  97, 109, 115,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102, 108,  97, 103, 115,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a0142208ca8277e0 = b_a0142208ca8277e0.words;
#if !CAPNP_LITE
static const uint16_t m_a0142208ca8277e0[] = {0};
static const uint16_t i_a0142208ca8277e0[] = {0};
const ::capnp::_::RawSchema s_a0142208ca8277e0 = {
  0xa0142208ca8277e0, b_a0142208ca8277e0.words, 33, nullptr, m_a0142208ca8277e0,
  0, 1, i_a0142208ca8277e0, nullptr, nullptr, { &s_a0142208ca8277e0, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_dacf4c24bade7b94 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    148, 123, 222, 186,  36,  76, 207, 218,
     11,   0,   0,   0,   1,   0,   1,   0,
     68,  68,  34,  34, 204, 204, 187, 187,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   2,   0,   0,  70,   3,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  66,  97, 116,  99, 104,
     75, 101, 114, 110, 101, 108,  76,  97,
    117, 110,  99, 104,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    106,  91,   3, 148, 204, 134,  95, 231,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dacf4c24bade7b94 = b_dacf4c24bade7b94.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dacf4c24bade7b94[] = {
  &s_e75f86cc94035b6a,
};
static const uint16_t m_dacf4c24bade7b94[] = {0, 1};
static const uint16_t i_dacf4c24bade7b94[] = {0, 1};
const ::capnp::_::RawSchema s_dacf4c24bade7b94 = {
  0xdacf4c24bade7b94, b_dacf4c24bade7b94.words, 54, d_dacf4c24bade7b94, m_dacf4c24bade7b94,
  1, 2, i_dacf4c24bade7b94, nullptr, nullptr, { &s_dacf4c24bade7b94, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_b2bde6a78c1a0cb4 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    180,  12,  26, 140, 167, 230, 189, 178,
     11,   0,   0,   0,   1,   0,   1,   0,
     68,  68,  34,  34, 204, 204, 187, 187,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     74,   3,   0,   0, 189,   3,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 117, 108, 116, 105,
     71, 112, 117,  82, 101, 113, 117, 101,
    115, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
    117, 117, 105, 100, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109,  97, 110, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b2bde6a78c1a0cb4 = b_b2bde6a78c1a0cb4.words;
#if !CAPNP_LITE
static const uint16_t m_b2bde6a78c1a0cb4[] = {1, 2, 0};
static const uint16_t i_b2bde6a78c1a0cb4[] = {0, 1, 2};
const ::capnp::_::RawSchema s_b2bde6a78c1a0cb4 = {
  0xb2bde6a78c1a0cb4, b_b2bde6a78c1a0cb4.words, 68, nullptr, m_b2bde6a78c1a0cb4,
  0, 3, i_b2bde6a78c1a0cb4, nullptr, nullptr, { &s_b2bde6a78c1a0cb4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<191> b_d909ac68956b8ff9 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    249, 143, 107, 149, 104, 172,   9, 217,
     11,   0,   0,   0,   3,   0,   0,   0,
     68,  68,  34,  34, 204, 204, 187, 187,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   3,   0,   0, 123,   8,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 199,   3,   0,   0,
    201,   2,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     60,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    179, 210, 129, 235, 218, 242,  93, 186,
     17,  72, 178, 207, 251, 179,  65, 149,
    209,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   1,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    206,  84, 108,  29, 135, 211,  45, 190,
    156, 108, 174,  48, 150, 246, 162, 154,
    189,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   1,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    172,   4, 204,  65,   4, 106,  49, 188,
    137,   2,  88, 246, 193,  32, 182, 215,
    169,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   1,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    196, 150, 105, 130,  84, 160, 205, 178,
     12, 225,  80, 209,  14,  30, 220, 158,
    149,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   1,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    107, 173, 128,  15, 110,  42, 188, 229,
    228, 119, 230,  67, 250, 209, 204, 245,
    129,   1,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   1,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    249, 205, 106,  50, 208, 235, 255, 208,
     37,  79, 222, 254,  77, 239,  94, 240,
    113,   1,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   1,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
     59, 115, 168,  83,   3, 159, 193, 248,
    230, 233, 127, 137, 109, 159, 227, 243,
     97,   1,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   1,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     62, 254, 215, 176,  71, 250, 235, 171,
    101, 147, 163,  77, 102, 172, 122, 187,
     81,   1,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   1,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     47,  80,  95, 124, 177, 166, 148, 164,
     64, 168, 102, 210, 155, 107,  58, 191,
     65,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   1,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     54,  21,  83,  67,  55, 176,  56, 161,
     40, 131,  32, 105, 224,  28,  13, 167,
     45,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   1,   0,   0,   7,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    249, 120, 224, 247,  81, 209, 130, 176,
    160, 152, 176, 163,  48, 148, 168, 138,
     25,   1,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   1,   0,   0,   7,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
    136, 218, 205,  16, 246, 163, 191, 233,
     13, 128,  12, 153,  46,  19, 157, 129,
      9,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   1,   0,   0,   7,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
    191, 195, 181, 124, 248, 125, 141, 165,
    179, 116, 230,  37,  56, 120,  95, 193,
    245,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,   7,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
    148, 239, 178, 147, 104, 234, 177, 140,
      8, 106, 186, 105,  66, 201, 188, 251,
    229,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   0,   0,   0,   7,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
    155,  87, 155,  94,  92,  41,  69, 143,
    165, 143,   8,  84, 229, 180, 116, 129,
    213,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   0,   0,   0,   7,   0,   0,   0,
     99, 117, 100,  97,  73, 110, 105, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 100,  97,  77, 101, 109,  65,
    108, 108, 111,  99,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 100,  97,  77, 101, 109,  99,
    112, 121,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 100,  97,  77, 101, 109,  70,
    114, 101, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 114, 101,  97, 116, 101,  67, 117,
    100,  97,  83, 116, 114, 101,  97, 109,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 115, 116, 114, 111, 121,  67,
    117, 100,  97,  83, 116, 114, 101,  97,
    109,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 121, 110,  99, 104, 114, 111, 110,
    105, 122, 101,  67, 117, 100,  97,  83,
    116, 114, 101,  97, 109,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 100,  97,  75, 101, 114, 110,
    101, 108,  76,  97, 117, 110,  99, 104,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 114, 101,  97, 116, 101,  69, 118,
    101, 110, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101,  99, 111, 114, 100,  69, 118,
    101, 110, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 118, 101, 110, 116,  83, 121, 110,
     99, 104, 114, 111, 110, 105, 122, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 115, 116, 114, 111, 121,  69,
    118, 101, 110, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     98,  97, 116,  99, 104,  75, 101, 114,
    110, 101, 108,  76,  97, 117, 110,  99,
    104,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 117, 108, 116, 105,  71, 112, 117,
     67, 111, 111, 112, 101, 114,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 108, 108, 111,  99,  65, 110, 100,
     87, 114, 105, 116, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d909ac68956b8ff9 = b_d909ac68956b8ff9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d909ac68956b8ff9[] = {
  &s_8174b4e554088fa5,
  &s_819d132e990c800d,
  &s_8aa89430a3b098a0,
  &s_8cb1ea6893b2ef94,
  &s_8f45295c5e9b579b,
  &s_9541b3fbcfb24811,
  &s_9aa2f69630ae6c9c,
  &s_9edc1e0ed150e10c,
  &s_a138b03743531536,
  &s_a494a6b17c5f502f,
  &s_a58d7df87cb5c3bf,
  &s_a70d1ce069208328,
  &s_abebfa47b0d7fe3e,
  &s_b082d151f7e078f9,
  &s_b2cda054826996c4,
  &s_ba5df2daeb81d2b3,
  &s_bb7aac664da39365,
  &s_bc316a0441cc04ac,
  &s_be2dd3871d6c54ce,
  &s_bf3a6b9bd266a840,
  &s_c15f783825e674b3,
  &s_d0ffebd0326acdf9,
  &s_d7b620c1f6580289,
  &s_e5bc2a6e0f80ad6b,
  &s_e9bfa3f610cdda88,
  &s_f05eef4dfede4f25,
  &s_f3e39f6d897fe9e6,
  &s_f5ccd1fa43e677e4,
  &s_f8c19f0353a8733b,
  &s_fbbcc94269ba6a08,
};
static const uint16_t m_d909ac68956b8ff9[] = {14, 12, 4, 8, 0, 7, 1, 3, 2, 5, 11, 10, 13, 9, 6};
const ::capnp::_::RawSchema s_d909ac68956b8ff9 = {
  0xd909ac68956b8ff9, b_d909ac68956b8ff9.words, 191, d_d909ac68956b8ff9, m_d909ac68956b8ff9,
  30, 15, nullptr, nullptr, nullptr, { &s_d909ac68956b8ff9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_ba5df2daeb81d2b3 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    179, 210, 129, 235, 218, 242,  93, 186,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    117, 100,  97,  73, 110, 105, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_ba5df2daeb81d2b3 = b_ba5df2daeb81d2b3.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ba5df2daeb81d2b3 = {
  0xba5df2daeb81d2b3, b_ba5df2daeb81d2b3.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ba5df2daeb81d2b3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9541b3fbcfb24811 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     17,  72, 178, 207, 251, 179,  65, 149,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    117, 100,  97,  73, 110, 105, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9541b3fbcfb24811 = b_9541b3fbcfb24811.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9541b3fbcfb24811[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_9541b3fbcfb24811[] = {0};
static const uint16_t i_9541b3fbcfb24811[] = {0};
const ::capnp::_::RawSchema s_9541b3fbcfb24811 = {
  0x9541b3fbcfb24811, b_9541b3fbcfb24811.words, 34, d_9541b3fbcfb24811, m_9541b3fbcfb24811,
  1, 1, i_9541b3fbcfb24811, nullptr, nullptr, { &s_9541b3fbcfb24811, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_be2dd3871d6c54ce = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    206,  84, 108,  29, 135, 211,  45, 190,
     23,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    117, 100,  97,  77, 101, 109,  65, 108,
    108, 111,  99,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_be2dd3871d6c54ce = b_be2dd3871d6c54ce.words;
#if !CAPNP_LITE
static const uint16_t m_be2dd3871d6c54ce[] = {0};
static const uint16_t i_be2dd3871d6c54ce[] = {0};
const ::capnp::_::RawSchema s_be2dd3871d6c54ce = {
  0xbe2dd3871d6c54ce, b_be2dd3871d6c54ce.words, 35, nullptr, m_be2dd3871d6c54ce,
  0, 1, i_be2dd3871d6c54ce, nullptr, nullptr, { &s_be2dd3871d6c54ce, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_9aa2f69630ae6c9c = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    156, 108, 174,  48, 150, 246, 162, 154,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    117, 100,  97,  77, 101, 109,  65, 108,
    108, 111,  99,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    174,   8, 226, 224, 226, 183,  50, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9aa2f69630ae6c9c = b_9aa2f69630ae6c9c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9aa2f69630ae6c9c[] = {
  &s_f032b7e2e0e208ae,
};
static const uint16_t m_9aa2f69630ae6c9c[] = {0};
static const uint16_t i_9aa2f69630ae6c9c[] = {0};
const ::capnp::_::RawSchema s_9aa2f69630ae6c9c = {
  0x9aa2f69630ae6c9c, b_9aa2f69630ae6c9c.words, 35, d_9aa2f69630ae6c9c, m_9aa2f69630ae6c9c,
  1, 1, i_9aa2f69630ae6c9c, nullptr, nullptr, { &s_9aa2f69630ae6c9c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bc316a0441cc04ac = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    172,   4, 204,  65,   4, 106,  49, 188,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    117, 100,  97,  77, 101, 109,  99, 112,
    121,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     99, 207, 238,  96,  40, 196, 100, 170,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc316a0441cc04ac = b_bc316a0441cc04ac.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bc316a0441cc04ac[] = {
  &s_aa64c42860eecf63,
};
static const uint16_t m_bc316a0441cc04ac[] = {0};
static const uint16_t i_bc316a0441cc04ac[] = {0};
const ::capnp::_::RawSchema s_bc316a0441cc04ac = {
  0xbc316a0441cc04ac, b_bc316a0441cc04ac.words, 35, d_bc316a0441cc04ac, m_bc316a0441cc04ac,
  1, 1, i_bc316a0441cc04ac, nullptr, nullptr, { &s_bc316a0441cc04ac, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d7b620c1f6580289 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    137,   2,  88, 246, 193,  32, 182, 215,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    117, 100,  97,  77, 101, 109,  99, 112,
    121,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d7b620c1f6580289 = b_d7b620c1f6580289.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d7b620c1f6580289[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_d7b620c1f6580289[] = {0};
static const uint16_t i_d7b620c1f6580289[] = {0};
const ::capnp::_::RawSchema s_d7b620c1f6580289 = {
  0xd7b620c1f6580289, b_d7b620c1f6580289.words, 35, d_d7b620c1f6580289, m_d7b620c1f6580289,
  1, 1, i_d7b620c1f6580289, nullptr, nullptr, { &s_d7b620c1f6580289, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b2cda054826996c4 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    196, 150, 105, 130,  84, 160, 205, 178,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    117, 100,  97,  77, 101, 109,  70, 114,
    101, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    170, 101,  54, 224,  37, 103, 115, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b2cda054826996c4 = b_b2cda054826996c4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b2cda054826996c4[] = {
  &s_a3736725e03665aa,
};
static const uint16_t m_b2cda054826996c4[] = {0};
static const uint16_t i_b2cda054826996c4[] = {0};
const ::capnp::_::RawSchema s_b2cda054826996c4 = {
  0xb2cda054826996c4, b_b2cda054826996c4.words, 35, d_b2cda054826996c4, m_b2cda054826996c4,
  1, 1, i_b2cda054826996c4, nullptr, nullptr, { &s_b2cda054826996c4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_9edc1e0ed150e10c = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     12, 225,  80, 209,  14,  30, 220, 158,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    117, 100,  97,  77, 101, 109,  70, 114,
    101, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9edc1e0ed150e10c = b_9edc1e0ed150e10c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9edc1e0ed150e10c[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_9edc1e0ed150e10c[] = {0};
static const uint16_t i_9edc1e0ed150e10c[] = {0};
const ::capnp::_::RawSchema s_9edc1e0ed150e10c = {
  0x9edc1e0ed150e10c, b_9edc1e0ed150e10c.words, 35, d_9edc1e0ed150e10c, m_9edc1e0ed150e10c,
  1, 1, i_9edc1e0ed150e10c, nullptr, nullptr, { &s_9edc1e0ed150e10c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e5bc2a6e0f80ad6b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    107, 173, 128,  15, 110,  42, 188, 229,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    114, 101,  97, 116, 101,  67, 117, 100,
     97,  83, 116, 114, 101,  97, 109,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    208, 203, 212,  65,  15, 165, 231, 157,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e5bc2a6e0f80ad6b = b_e5bc2a6e0f80ad6b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e5bc2a6e0f80ad6b[] = {
  &s_9de7a50f41d4cbd0,
};
static const uint16_t m_e5bc2a6e0f80ad6b[] = {0};
static const uint16_t i_e5bc2a6e0f80ad6b[] = {0};
const ::capnp::_::RawSchema s_e5bc2a6e0f80ad6b = {
  0xe5bc2a6e0f80ad6b, b_e5bc2a6e0f80ad6b.words, 35, d_e5bc2a6e0f80ad6b, m_e5bc2a6e0f80ad6b,
  1, 1, i_e5bc2a6e0f80ad6b, nullptr, nullptr, { &s_e5bc2a6e0f80ad6b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f5ccd1fa43e677e4 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    228, 119, 230,  67, 250, 209, 204, 245,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    114, 101,  97, 116, 101,  67, 117, 100,
     97,  83, 116, 114, 101,  97, 109,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     83, 236,  80, 111, 197,  10, 181, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f5ccd1fa43e677e4 = b_f5ccd1fa43e677e4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f5ccd1fa43e677e4[] = {
  &s_ddb50ac56f50ec53,
};
static const uint16_t m_f5ccd1fa43e677e4[] = {0};
static const uint16_t i_f5ccd1fa43e677e4[] = {0};
const ::capnp::_::RawSchema s_f5ccd1fa43e677e4 = {
  0xf5ccd1fa43e677e4, b_f5ccd1fa43e677e4.words, 35, d_f5ccd1fa43e677e4, m_f5ccd1fa43e677e4,
  1, 1, i_f5ccd1fa43e677e4, nullptr, nullptr, { &s_f5ccd1fa43e677e4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d0ffebd0326acdf9 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    249, 205, 106,  50, 208, 235, 255, 208,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 100,
    101, 115, 116, 114, 111, 121,  67, 117,
    100,  97,  83, 116, 114, 101,  97, 109,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     83, 236,  80, 111, 197,  10, 181, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d0ffebd0326acdf9 = b_d0ffebd0326acdf9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d0ffebd0326acdf9[] = {
  &s_ddb50ac56f50ec53,
};
static const uint16_t m_d0ffebd0326acdf9[] = {0};
static const uint16_t i_d0ffebd0326acdf9[] = {0};
const ::capnp::_::RawSchema s_d0ffebd0326acdf9 = {
  0xd0ffebd0326acdf9, b_d0ffebd0326acdf9.words, 35, d_d0ffebd0326acdf9, m_d0ffebd0326acdf9,
  1, 1, i_d0ffebd0326acdf9, nullptr, nullptr, { &s_d0ffebd0326acdf9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_f05eef4dfede4f25 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     37,  79, 222, 254,  77, 239,  94, 240,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 100,
    101, 115, 116, 114, 111, 121,  67, 117,
    100,  97,  83, 116, 114, 101,  97, 109,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f05eef4dfede4f25 = b_f05eef4dfede4f25.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f05eef4dfede4f25[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_f05eef4dfede4f25[] = {0};
static const uint16_t i_f05eef4dfede4f25[] = {0};
const ::capnp::_::RawSchema s_f05eef4dfede4f25 = {
  0xf05eef4dfede4f25, b_f05eef4dfede4f25.words, 36, d_f05eef4dfede4f25, m_f05eef4dfede4f25,
  1, 1, i_f05eef4dfede4f25, nullptr, nullptr, { &s_f05eef4dfede4f25, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_f8c19f0353a8733b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     59, 115, 168,  83,   3, 159, 193, 248,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 115,
    121, 110,  99, 104, 114, 111, 110, 105,
    122, 101,  67, 117, 100,  97,  83, 116,
    114, 101,  97, 109,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     83, 236,  80, 111, 197,  10, 181, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f8c19f0353a8733b = b_f8c19f0353a8733b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f8c19f0353a8733b[] = {
  &s_ddb50ac56f50ec53,
};
static const uint16_t m_f8c19f0353a8733b[] = {0};
static const uint16_t i_f8c19f0353a8733b[] = {0};
const ::capnp::_::RawSchema s_f8c19f0353a8733b = {
  0xf8c19f0353a8733b, b_f8c19f0353a8733b.words, 36, d_f8c19f0353a8733b, m_f8c19f0353a8733b,
  1, 1, i_f8c19f0353a8733b, nullptr, nullptr, { &s_f8c19f0353a8733b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_f3e39f6d897fe9e6 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    230, 233, 127, 137, 109, 159, 227, 243,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 115,
    121, 110,  99, 104, 114, 111, 110, 105,
    122, 101,  67, 117, 100,  97,  83, 116,
    114, 101,  97, 109,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f3e39f6d897fe9e6 = b_f3e39f6d897fe9e6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f3e39f6d897fe9e6[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_f3e39f6d897fe9e6[] = {0};
static const uint16_t i_f3e39f6d897fe9e6[] = {0};
const ::capnp::_::RawSchema s_f3e39f6d897fe9e6 = {
  0xf3e39f6d897fe9e6, b_f3e39f6d897fe9e6.words, 36, d_f3e39f6d897fe9e6, m_f3e39f6d897fe9e6,
  1, 1, i_f3e39f6d897fe9e6, nullptr, nullptr, { &s_f3e39f6d897fe9e6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_abebfa47b0d7fe3e = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     62, 254, 215, 176,  71, 250, 235, 171,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    117, 100,  97,  75, 101, 114, 110, 101,
    108,  76,  97, 117, 110,  99, 104,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    106,  91,   3, 148, 204, 134,  95, 231,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_abebfa47b0d7fe3e = b_abebfa47b0d7fe3e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_abebfa47b0d7fe3e[] = {
  &s_e75f86cc94035b6a,
};
static const uint16_t m_abebfa47b0d7fe3e[] = {0};
static const uint16_t i_abebfa47b0d7fe3e[] = {0};
const ::capnp::_::RawSchema s_abebfa47b0d7fe3e = {
  0xabebfa47b0d7fe3e, b_abebfa47b0d7fe3e.words, 35, d_abebfa47b0d7fe3e, m_abebfa47b0d7fe3e,
  1, 1, i_abebfa47b0d7fe3e, nullptr, nullptr, { &s_abebfa47b0d7fe3e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bb7aac664da39365 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    101, 147, 163,  77, 102, 172, 122, 187,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    117, 100,  97,  75, 101, 114, 110, 101,
    108,  76,  97, 117, 110,  99, 104,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb7aac664da39365 = b_bb7aac664da39365.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb7aac664da39365[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_bb7aac664da39365[] = {0};
static const uint16_t i_bb7aac664da39365[] = {0};
const ::capnp::_::RawSchema s_bb7aac664da39365 = {
  0xbb7aac664da39365, b_bb7aac664da39365.words, 35, d_bb7aac664da39365, m_bb7aac664da39365,
  1, 1, i_bb7aac664da39365, nullptr, nullptr, { &s_bb7aac664da39365, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a494a6b17c5f502f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     47,  80,  95, 124, 177, 166, 148, 164,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    114, 101,  97, 116, 101,  69, 118, 101,
    110, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    224, 119, 130, 202,   8,  34,  20, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a494a6b17c5f502f = b_a494a6b17c5f502f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a494a6b17c5f502f[] = {
  &s_a0142208ca8277e0,
};
static const uint16_t m_a494a6b17c5f502f[] = {0};
static const uint16_t i_a494a6b17c5f502f[] = {0};
const ::capnp::_::RawSchema s_a494a6b17c5f502f = {
  0xa494a6b17c5f502f, b_a494a6b17c5f502f.words, 35, d_a494a6b17c5f502f, m_a494a6b17c5f502f,
  1, 1, i_a494a6b17c5f502f, nullptr, nullptr, { &s_a494a6b17c5f502f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bf3a6b9bd266a840 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     64, 168, 102, 210, 155, 107,  58, 191,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  99,
    114, 101,  97, 116, 101,  69, 118, 101,
    110, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  31,  13, 251,  21, 188, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bf3a6b9bd266a840 = b_bf3a6b9bd266a840.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bf3a6b9bd266a840[] = {
  &s_92bc15fb0d1fcb65,
};
static const uint16_t m_bf3a6b9bd266a840[] = {0};
static const uint16_t i_bf3a6b9bd266a840[] = {0};
const ::capnp::_::RawSchema s_bf3a6b9bd266a840 = {
  0xbf3a6b9bd266a840, b_bf3a6b9bd266a840.words, 35, d_bf3a6b9bd266a840, m_bf3a6b9bd266a840,
  1, 1, i_bf3a6b9bd266a840, nullptr, nullptr, { &s_bf3a6b9bd266a840, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a138b03743531536 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     54,  21,  83,  67,  55, 176,  56, 161,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 114,
    101,  99, 111, 114, 100,  69, 118, 101,
    110, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  31,  13, 251,  21, 188, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a138b03743531536 = b_a138b03743531536.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a138b03743531536[] = {
  &s_92bc15fb0d1fcb65,
};
static const uint16_t m_a138b03743531536[] = {0};
static const uint16_t i_a138b03743531536[] = {0};
const ::capnp::_::RawSchema s_a138b03743531536 = {
  0xa138b03743531536, b_a138b03743531536.words, 35, d_a138b03743531536, m_a138b03743531536,
  1, 1, i_a138b03743531536, nullptr, nullptr, { &s_a138b03743531536, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a70d1ce069208328 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     40, 131,  32, 105, 224,  28,  13, 167,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 114,
    101,  99, 111, 114, 100,  69, 118, 101,
    110, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a70d1ce069208328 = b_a70d1ce069208328.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a70d1ce069208328[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_a70d1ce069208328[] = {0};
static const uint16_t i_a70d1ce069208328[] = {0};
const ::capnp::_::RawSchema s_a70d1ce069208328 = {
  0xa70d1ce069208328, b_a70d1ce069208328.words, 35, d_a70d1ce069208328, m_a70d1ce069208328,
  1, 1, i_a70d1ce069208328, nullptr, nullptr, { &s_a70d1ce069208328, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b082d151f7e078f9 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    249, 120, 224, 247,  81, 209, 130, 176,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 101,
    118, 101, 110, 116,  83, 121, 110,  99,
    104, 114, 111, 110, 105, 122, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  31,  13, 251,  21, 188, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b082d151f7e078f9 = b_b082d151f7e078f9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b082d151f7e078f9[] = {
  &s_92bc15fb0d1fcb65,
};
static const uint16_t m_b082d151f7e078f9[] = {0};
static const uint16_t i_b082d151f7e078f9[] = {0};
const ::capnp::_::RawSchema s_b082d151f7e078f9 = {
  0xb082d151f7e078f9, b_b082d151f7e078f9.words, 35, d_b082d151f7e078f9, m_b082d151f7e078f9,
  1, 1, i_b082d151f7e078f9, nullptr, nullptr, { &s_b082d151f7e078f9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8aa89430a3b098a0 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    160, 152, 176, 163,  48, 148, 168, 138,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 101,
    118, 101, 110, 116,  83, 121, 110,  99,
    104, 114, 111, 110, 105, 122, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8aa89430a3b098a0 = b_8aa89430a3b098a0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8aa89430a3b098a0[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_8aa89430a3b098a0[] = {0};
static const uint16_t i_8aa89430a3b098a0[] = {0};
const ::capnp::_::RawSchema s_8aa89430a3b098a0 = {
  0x8aa89430a3b098a0, b_8aa89430a3b098a0.words, 35, d_8aa89430a3b098a0, m_8aa89430a3b098a0,
  1, 1, i_8aa89430a3b098a0, nullptr, nullptr, { &s_8aa89430a3b098a0, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e9bfa3f610cdda88 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    136, 218, 205,  16, 246, 163, 191, 233,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 100,
    101, 115, 116, 114, 111, 121,  69, 118,
    101, 110, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  31,  13, 251,  21, 188, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e9bfa3f610cdda88 = b_e9bfa3f610cdda88.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e9bfa3f610cdda88[] = {
  &s_92bc15fb0d1fcb65,
};
static const uint16_t m_e9bfa3f610cdda88[] = {0};
static const uint16_t i_e9bfa3f610cdda88[] = {0};
const ::capnp::_::RawSchema s_e9bfa3f610cdda88 = {
  0xe9bfa3f610cdda88, b_e9bfa3f610cdda88.words, 35, d_e9bfa3f610cdda88, m_e9bfa3f610cdda88,
  1, 1, i_e9bfa3f610cdda88, nullptr, nullptr, { &s_e9bfa3f610cdda88, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_819d132e990c800d = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     13, 128,  12, 153,  46,  19, 157, 129,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 100,
    101, 115, 116, 114, 111, 121,  69, 118,
    101, 110, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_819d132e990c800d = b_819d132e990c800d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_819d132e990c800d[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_819d132e990c800d[] = {0};
static const uint16_t i_819d132e990c800d[] = {0};
const ::capnp::_::RawSchema s_819d132e990c800d = {
  0x819d132e990c800d, b_819d132e990c800d.words, 35, d_819d132e990c800d, m_819d132e990c800d,
  1, 1, i_819d132e990c800d, nullptr, nullptr, { &s_819d132e990c800d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a58d7df87cb5c3bf = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    191, 195, 181, 124, 248, 125, 141, 165,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  98,
     97, 116,  99, 104,  75, 101, 114, 110,
    101, 108,  76,  97, 117, 110,  99, 104,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    148, 123, 222, 186,  36,  76, 207, 218,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a58d7df87cb5c3bf = b_a58d7df87cb5c3bf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a58d7df87cb5c3bf[] = {
  &s_dacf4c24bade7b94,
};
static const uint16_t m_a58d7df87cb5c3bf[] = {0};
static const uint16_t i_a58d7df87cb5c3bf[] = {0};
const ::capnp::_::RawSchema s_a58d7df87cb5c3bf = {
  0xa58d7df87cb5c3bf, b_a58d7df87cb5c3bf.words, 35, d_a58d7df87cb5c3bf, m_a58d7df87cb5c3bf,
  1, 1, i_a58d7df87cb5c3bf, nullptr, nullptr, { &s_a58d7df87cb5c3bf, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_c15f783825e674b3 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    179, 116, 230,  37,  56, 120,  95, 193,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  98,
     97, 116,  99, 104,  75, 101, 114, 110,
    101, 108,  76,  97, 117, 110,  99, 104,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c15f783825e674b3 = b_c15f783825e674b3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c15f783825e674b3[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_c15f783825e674b3[] = {0};
static const uint16_t i_c15f783825e674b3[] = {0};
const ::capnp::_::RawSchema s_c15f783825e674b3 = {
  0xc15f783825e674b3, b_c15f783825e674b3.words, 36, d_c15f783825e674b3, m_c15f783825e674b3,
  1, 1, i_c15f783825e674b3, nullptr, nullptr, { &s_c15f783825e674b3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_8cb1ea6893b2ef94 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    148, 239, 178, 147, 104, 234, 177, 140,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 109,
    117, 108, 116, 105,  71, 112, 117,  67,
    111, 111, 112, 101, 114,  97, 116, 105,
    111, 110,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    180,  12,  26, 140, 167, 230, 189, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8cb1ea6893b2ef94 = b_8cb1ea6893b2ef94.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8cb1ea6893b2ef94[] = {
  &s_b2bde6a78c1a0cb4,
};
static const uint16_t m_8cb1ea6893b2ef94[] = {0};
static const uint16_t i_8cb1ea6893b2ef94[] = {0};
const ::capnp::_::RawSchema s_8cb1ea6893b2ef94 = {
  0x8cb1ea6893b2ef94, b_8cb1ea6893b2ef94.words, 36, d_8cb1ea6893b2ef94, m_8cb1ea6893b2ef94,
  1, 1, i_8cb1ea6893b2ef94, nullptr, nullptr, { &s_8cb1ea6893b2ef94, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_fbbcc94269ba6a08 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
      8, 106, 186, 105,  66, 201, 188, 251,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46, 109,
    117, 108, 116, 105,  71, 112, 117,  67,
    111, 111, 112, 101, 114,  97, 116, 105,
    111, 110,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    136,  53,  26,  54,   3, 107, 110, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fbbcc94269ba6a08 = b_fbbcc94269ba6a08.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fbbcc94269ba6a08[] = {
  &s_bc6e6b03361a3588,
};
static const uint16_t m_fbbcc94269ba6a08[] = {0};
static const uint16_t i_fbbcc94269ba6a08[] = {0};
const ::capnp::_::RawSchema s_fbbcc94269ba6a08 = {
  0xfbbcc94269ba6a08, b_fbbcc94269ba6a08.words, 36, d_fbbcc94269ba6a08, m_fbbcc94269ba6a08,
  1, 1, i_fbbcc94269ba6a08, nullptr, nullptr, { &s_fbbcc94269ba6a08, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_8f45295c5e9b579b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    155,  87, 155,  94,  92,  41,  69, 143,
     23,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  97,
    108, 108, 111,  99,  65, 110, 100,  87,
    114, 105, 116, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f45295c5e9b579b = b_8f45295c5e9b579b.words;
#if !CAPNP_LITE
static const uint16_t m_8f45295c5e9b579b[] = {1, 0};
static const uint16_t i_8f45295c5e9b579b[] = {0, 1};
const ::capnp::_::RawSchema s_8f45295c5e9b579b = {
  0x8f45295c5e9b579b, b_8f45295c5e9b579b.words, 50, nullptr, m_8f45295c5e9b579b,
  0, 2, i_8f45295c5e9b579b, nullptr, nullptr, { &s_8f45295c5e9b579b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8174b4e554088fa5 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    165, 143,   8,  84, 229, 180, 116, 129,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 117, 100,  97,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 100,  97,  83,
    101, 114, 118, 105,  99, 101,  46,  97,
    108, 108, 111,  99,  65, 110, 100,  87,
    114, 105, 116, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    174,   8, 226, 224, 226, 183,  50, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8174b4e554088fa5 = b_8174b4e554088fa5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8174b4e554088fa5[] = {
  &s_f032b7e2e0e208ae,
};
static const uint16_t m_8174b4e554088fa5[] = {0};
static const uint16_t i_8174b4e554088fa5[] = {0};
const ::capnp::_::RawSchema s_8174b4e554088fa5 = {
  0x8174b4e554088fa5, b_8174b4e554088fa5.words, 35, d_8174b4e554088fa5, m_8174b4e554088fa5,
  1, 1, i_8174b4e554088fa5, nullptr, nullptr, { &s_8174b4e554088fa5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// MemcpyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MemcpyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t MemcpyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MemcpyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MemcpyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// StreamHandle
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t StreamHandle::_capnpPrivate::dataWordSize;
constexpr uint16_t StreamHandle::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind StreamHandle::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StreamHandle::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// StreamCreateParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t StreamCreateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t StreamCreateParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind StreamCreateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StreamCreateParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// EventHandle
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t EventHandle::_capnpPrivate::dataWordSize;
constexpr uint16_t EventHandle::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind EventHandle::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventHandle::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// EventParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t EventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t EventParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind EventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BatchKernelLaunch
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BatchKernelLaunch::_capnpPrivate::dataWordSize;
constexpr uint16_t BatchKernelLaunch::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BatchKernelLaunch::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BatchKernelLaunch::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MultiGpuRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MultiGpuRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t MultiGpuRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MultiGpuRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MultiGpuRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::CudaService::CudaInitParams,  ::CudaService::CudaInitResults>
CudaService::Client::cudaInitRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::CudaInitParams,  ::CudaService::CudaInitResults>(
      0xd909ac68956b8ff9ull, 0, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::cudaInit(CudaInitContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "cudaInit",
      0xd909ac68956b8ff9ull, 0);
}
::capnp::Request< ::CudaService::CudaMemAllocParams,  ::CudaService::CudaMemAllocResults>
CudaService::Client::cudaMemAllocRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::CudaMemAllocParams,  ::CudaService::CudaMemAllocResults>(
      0xd909ac68956b8ff9ull, 1, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::cudaMemAlloc(CudaMemAllocContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "cudaMemAlloc",
      0xd909ac68956b8ff9ull, 1);
}
::capnp::Request< ::CudaService::CudaMemcpyParams,  ::CudaService::CudaMemcpyResults>
CudaService::Client::cudaMemcpyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::CudaMemcpyParams,  ::CudaService::CudaMemcpyResults>(
      0xd909ac68956b8ff9ull, 2, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::cudaMemcpy(CudaMemcpyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "cudaMemcpy",
      0xd909ac68956b8ff9ull, 2);
}
::capnp::Request< ::CudaService::CudaMemFreeParams,  ::CudaService::CudaMemFreeResults>
CudaService::Client::cudaMemFreeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::CudaMemFreeParams,  ::CudaService::CudaMemFreeResults>(
      0xd909ac68956b8ff9ull, 3, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::cudaMemFree(CudaMemFreeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "cudaMemFree",
      0xd909ac68956b8ff9ull, 3);
}
::capnp::Request< ::CudaService::CreateCudaStreamParams,  ::CudaService::CreateCudaStreamResults>
CudaService::Client::createCudaStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::CreateCudaStreamParams,  ::CudaService::CreateCudaStreamResults>(
      0xd909ac68956b8ff9ull, 4, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::createCudaStream(CreateCudaStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "createCudaStream",
      0xd909ac68956b8ff9ull, 4);
}
::capnp::Request< ::CudaService::DestroyCudaStreamParams,  ::CudaService::DestroyCudaStreamResults>
CudaService::Client::destroyCudaStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::DestroyCudaStreamParams,  ::CudaService::DestroyCudaStreamResults>(
      0xd909ac68956b8ff9ull, 5, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::destroyCudaStream(DestroyCudaStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "destroyCudaStream",
      0xd909ac68956b8ff9ull, 5);
}
::capnp::Request< ::CudaService::SynchronizeCudaStreamParams,  ::CudaService::SynchronizeCudaStreamResults>
CudaService::Client::synchronizeCudaStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::SynchronizeCudaStreamParams,  ::CudaService::SynchronizeCudaStreamResults>(
      0xd909ac68956b8ff9ull, 6, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::synchronizeCudaStream(SynchronizeCudaStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "synchronizeCudaStream",
      0xd909ac68956b8ff9ull, 6);
}
::capnp::Request< ::CudaService::CudaKernelLaunchParams,  ::CudaService::CudaKernelLaunchResults>
CudaService::Client::cudaKernelLaunchRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::CudaKernelLaunchParams,  ::CudaService::CudaKernelLaunchResults>(
      0xd909ac68956b8ff9ull, 7, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::cudaKernelLaunch(CudaKernelLaunchContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "cudaKernelLaunch",
      0xd909ac68956b8ff9ull, 7);
}
::capnp::Request< ::CudaService::CreateEventParams,  ::CudaService::CreateEventResults>
CudaService::Client::createEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::CreateEventParams,  ::CudaService::CreateEventResults>(
      0xd909ac68956b8ff9ull, 8, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::createEvent(CreateEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "createEvent",
      0xd909ac68956b8ff9ull, 8);
}
::capnp::Request< ::CudaService::RecordEventParams,  ::CudaService::RecordEventResults>
CudaService::Client::recordEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::RecordEventParams,  ::CudaService::RecordEventResults>(
      0xd909ac68956b8ff9ull, 9, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::recordEvent(RecordEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "recordEvent",
      0xd909ac68956b8ff9ull, 9);
}
::capnp::Request< ::CudaService::EventSynchronizeParams,  ::CudaService::EventSynchronizeResults>
CudaService::Client::eventSynchronizeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::EventSynchronizeParams,  ::CudaService::EventSynchronizeResults>(
      0xd909ac68956b8ff9ull, 10, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::eventSynchronize(EventSynchronizeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "eventSynchronize",
      0xd909ac68956b8ff9ull, 10);
}
::capnp::Request< ::CudaService::DestroyEventParams,  ::CudaService::DestroyEventResults>
CudaService::Client::destroyEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::DestroyEventParams,  ::CudaService::DestroyEventResults>(
      0xd909ac68956b8ff9ull, 11, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::destroyEvent(DestroyEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "destroyEvent",
      0xd909ac68956b8ff9ull, 11);
}
::capnp::Request< ::CudaService::BatchKernelLaunchParams,  ::CudaService::BatchKernelLaunchResults>
CudaService::Client::batchKernelLaunchRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::BatchKernelLaunchParams,  ::CudaService::BatchKernelLaunchResults>(
      0xd909ac68956b8ff9ull, 12, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::batchKernelLaunch(BatchKernelLaunchContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "batchKernelLaunch",
      0xd909ac68956b8ff9ull, 12);
}
::capnp::Request< ::CudaService::MultiGpuCooperationParams,  ::CudaService::MultiGpuCooperationResults>
CudaService::Client::multiGpuCooperationRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::MultiGpuCooperationParams,  ::CudaService::MultiGpuCooperationResults>(
      0xd909ac68956b8ff9ull, 13, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::multiGpuCooperation(MultiGpuCooperationContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "multiGpuCooperation",
      0xd909ac68956b8ff9ull, 13);
}
::capnp::Request< ::CudaService::AllocAndWriteParams,  ::CudaService::AllocAndWriteResults>
CudaService::Client::allocAndWriteRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::CudaService::AllocAndWriteParams,  ::CudaService::AllocAndWriteResults>(
      0xd909ac68956b8ff9ull, 14, sizeHint, {true});
}
::kj::Promise<void> CudaService::Server::allocAndWrite(AllocAndWriteContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cuda.capnp:CudaService", "allocAndWrite",
      0xd909ac68956b8ff9ull, 14);
}
::capnp::Capability::Server::DispatchCallResult CudaService::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd909ac68956b8ff9ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("cuda.capnp:CudaService", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult CudaService::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        cudaInit(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::CudaInitParams,  ::CudaService::CudaInitResults>(context)),
        false,
        false
      };
    case 1:
      return {
        cudaMemAlloc(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::CudaMemAllocParams,  ::CudaService::CudaMemAllocResults>(context)),
        false,
        false
      };
    case 2:
      return {
        cudaMemcpy(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::CudaMemcpyParams,  ::CudaService::CudaMemcpyResults>(context)),
        false,
        false
      };
    case 3:
      return {
        cudaMemFree(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::CudaMemFreeParams,  ::CudaService::CudaMemFreeResults>(context)),
        false,
        false
      };
    case 4:
      return {
        createCudaStream(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::CreateCudaStreamParams,  ::CudaService::CreateCudaStreamResults>(context)),
        false,
        false
      };
    case 5:
      return {
        destroyCudaStream(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::DestroyCudaStreamParams,  ::CudaService::DestroyCudaStreamResults>(context)),
        false,
        false
      };
    case 6:
      return {
        synchronizeCudaStream(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::SynchronizeCudaStreamParams,  ::CudaService::SynchronizeCudaStreamResults>(context)),
        false,
        false
      };
    case 7:
      return {
        cudaKernelLaunch(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::CudaKernelLaunchParams,  ::CudaService::CudaKernelLaunchResults>(context)),
        false,
        false
      };
    case 8:
      return {
        createEvent(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::CreateEventParams,  ::CudaService::CreateEventResults>(context)),
        false,
        false
      };
    case 9:
      return {
        recordEvent(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::RecordEventParams,  ::CudaService::RecordEventResults>(context)),
        false,
        false
      };
    case 10:
      return {
        eventSynchronize(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::EventSynchronizeParams,  ::CudaService::EventSynchronizeResults>(context)),
        false,
        false
      };
    case 11:
      return {
        destroyEvent(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::DestroyEventParams,  ::CudaService::DestroyEventResults>(context)),
        false,
        false
      };
    case 12:
      return {
        batchKernelLaunch(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::BatchKernelLaunchParams,  ::CudaService::BatchKernelLaunchResults>(context)),
        false,
        false
      };
    case 13:
      return {
        multiGpuCooperation(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::MultiGpuCooperationParams,  ::CudaService::MultiGpuCooperationResults>(context)),
        false,
        false
      };
    case 14:
      return {
        allocAndWrite(::capnp::Capability::Server::internalGetTypedContext<
             ::CudaService::AllocAndWriteParams,  ::CudaService::AllocAndWriteResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "cuda.capnp:CudaService",
          0xd909ac68956b8ff9ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// CudaService
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CudaInitParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CudaInitParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CudaInitParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CudaInitParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CudaInitParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CudaInitResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CudaInitResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CudaInitResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CudaInitResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CudaInitResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CudaMemAllocParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CudaMemAllocParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CudaMemAllocParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CudaMemAllocParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CudaMemAllocParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CudaMemAllocResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CudaMemAllocResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CudaMemAllocResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CudaMemAllocResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CudaMemAllocResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CudaMemcpyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CudaMemcpyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CudaMemcpyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CudaMemcpyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CudaMemcpyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CudaMemcpyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CudaMemcpyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CudaMemcpyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CudaMemcpyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CudaMemcpyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CudaMemFreeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CudaMemFreeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CudaMemFreeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CudaMemFreeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CudaMemFreeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CudaMemFreeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CudaMemFreeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CudaMemFreeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CudaMemFreeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CudaMemFreeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CreateCudaStreamParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CreateCudaStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CreateCudaStreamParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CreateCudaStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CreateCudaStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CreateCudaStreamResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CreateCudaStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CreateCudaStreamResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CreateCudaStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CreateCudaStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::DestroyCudaStreamParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::DestroyCudaStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::DestroyCudaStreamParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::DestroyCudaStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::DestroyCudaStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::DestroyCudaStreamResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::DestroyCudaStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::DestroyCudaStreamResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::DestroyCudaStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::DestroyCudaStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::SynchronizeCudaStreamParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::SynchronizeCudaStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::SynchronizeCudaStreamParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::SynchronizeCudaStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::SynchronizeCudaStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::SynchronizeCudaStreamResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::SynchronizeCudaStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::SynchronizeCudaStreamResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::SynchronizeCudaStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::SynchronizeCudaStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CudaKernelLaunchParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CudaKernelLaunchParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CudaKernelLaunchParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CudaKernelLaunchParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CudaKernelLaunchParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CudaKernelLaunchResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CudaKernelLaunchResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CudaKernelLaunchResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CudaKernelLaunchResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CudaKernelLaunchResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CreateEventParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CreateEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CreateEventParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CreateEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CreateEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::CreateEventResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::CreateEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::CreateEventResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::CreateEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::CreateEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::RecordEventParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::RecordEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::RecordEventParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::RecordEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::RecordEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::RecordEventResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::RecordEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::RecordEventResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::RecordEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::RecordEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::EventSynchronizeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::EventSynchronizeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::EventSynchronizeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::EventSynchronizeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::EventSynchronizeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::EventSynchronizeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::EventSynchronizeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::EventSynchronizeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::EventSynchronizeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::EventSynchronizeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::DestroyEventParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::DestroyEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::DestroyEventParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::DestroyEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::DestroyEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::DestroyEventResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::DestroyEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::DestroyEventResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::DestroyEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::DestroyEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::BatchKernelLaunchParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::BatchKernelLaunchParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::BatchKernelLaunchParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::BatchKernelLaunchParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::BatchKernelLaunchParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::BatchKernelLaunchResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::BatchKernelLaunchResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::BatchKernelLaunchResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::BatchKernelLaunchResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::BatchKernelLaunchResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::MultiGpuCooperationParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::MultiGpuCooperationParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::MultiGpuCooperationParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::MultiGpuCooperationParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::MultiGpuCooperationParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::MultiGpuCooperationResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::MultiGpuCooperationResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::MultiGpuCooperationResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::MultiGpuCooperationResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::MultiGpuCooperationResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::AllocAndWriteParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::AllocAndWriteParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::AllocAndWriteParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::AllocAndWriteParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::AllocAndWriteParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaService::AllocAndWriteResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaService::AllocAndWriteResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaService::AllocAndWriteResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaService::AllocAndWriteResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaService::AllocAndWriteResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



